{
  "key": "change-data-format",
  "documentationUrl": "https://prismatic.io/docs/components/change-data-format/",
  "public": true,
  "display": {
    "label": "Change Data Format",
    "description": "Change data from one format to another",
    "iconPath": "icon.png",
    "category": "Helpers",
    "iconBase64": ""
  },
  "connections": [],
  "actions": {
    "deserializeFromJson": {
      "display": {
        "label": "Deserialize JSON",
        "description": "Deserialize JSON data"
      },
      "examplePayload": {
        "data": {
          "person": {
            "first": "Bob",
            "last": "Johnson"
          },
          "dob": "1990-01-01"
        }
      },
      "key": "deserializeFromJson",
      "inputs": [
        {
          "placeholder": "Data to deserialize",
          "required": true,
          "comments": "JSON text to deserialize so it can be referenced in a subsequent step.",
          "example": "{\n  \"person\": {\n    \"first\": \"Bob\",\n    \"last\": \"Johnson\"\n  },\n  \"dob\": \"1990-01-01\"\n}",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "deserializeFromXml": {
      "display": {
        "label": "Deserialize XML",
        "description": "Deserialize XML data"
      },
      "examplePayload": {
        "data": {
          "person": {
            "first": "Bob",
            "last": "Johnson"
          },
          "dob": "1990-01-01"
        }
      },
      "key": "deserializeFromXml",
      "inputs": [
        {
          "placeholder": "Data to deserialize",
          "required": true,
          "comments": "XML text to deserialize so it can be referenced in a subsequent step.",
          "example": "<dob>1990-01-01</dob>\n<person>\n  <first>Bob</first>\n  <last>Johnson</last>\n</person>",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        },
        {
          "required": false,
          "comments": "Interpret numbers as strings?",
          "key": "numbersAsStrings",
          "type": "boolean",
          "default": "false",
          "label": "Parse numbers as strings?"
        }
      ]
    },
    "deserializeFromYaml": {
      "display": {
        "label": "Deserialize YAML",
        "description": "Deserialize YAML data"
      },
      "examplePayload": {
        "data": {
          "person": {
            "first": "Bob",
            "last": "Johnson"
          },
          "dob": "1990-01-01"
        }
      },
      "key": "deserializeFromYaml",
      "inputs": [
        {
          "placeholder": "Data to deserialize",
          "required": true,
          "comments": "YAML text to deserialize so it can be referenced in a subsequent step.",
          "example": "---\nperson:\n  first: Bob\n  last: Johnson\ndob: '1990-01-01'",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "deserializeFromBinary": {
      "display": {
        "label": "Deserialize BINARY",
        "description": "Deserialize BINARY data"
      },
      "examplePayload": {
        "data": {
          "person": {
            "first": "Bob",
            "last": "Johnson"
          },
          "dob": "1990-01-01"
        }
      },
      "key": "deserializeFromBinary",
      "inputs": [
        {
          "placeholder": "Data to deserialize",
          "required": true,
          "comments": "BINARY text to deserialize so it can be referenced in a subsequent step.",
          "example": null,
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "deserializeFromCsv": {
      "display": {
        "label": "Deserialize CSV",
        "description": "Deserialize CSV data"
      },
      "examplePayload": {
        "data": {
          "person": {
            "first": "Bob",
            "last": "Johnson"
          },
          "dob": "1990-01-01"
        }
      },
      "key": "deserializeFromCsv",
      "inputs": [
        {
          "placeholder": "Data to deserialize",
          "required": true,
          "comments": "CSV text to deserialize so it can be referenced in a subsequent step.",
          "example": "\"person__first\",\"person__last\",\"dob\"\n\"Bob\",\"Johnson\",\"1990-01-01\"",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        },
        {
          "required": false,
          "comments": "Specify if your CSV contains a header row.",
          "key": "isHeader",
          "type": "boolean",
          "default": "true",
          "label": "CSV Header"
        },
        {
          "required": true,
          "comments": "When enabled, keys with double-underscores will be parsed as nested objects. For example, 'person__first,person__last' will become '{ person: { first, last } }' rather than '{ person__first, person__last }'",
          "key": "unFlattenCsvKeys",
          "type": "boolean",
          "default": "false",
          "label": "Un-Flatten CSV Keys"
        }
      ]
    },
    "jsonToXml": {
      "display": {
        "label": "JSON to XML",
        "description": "Convert JSON to XML"
      },
      "examplePayload": {
        "data": "<dob>1990-01-01</dob>\n<person>\n  <first>Bob</first>\n  <last>Johnson</last>\n</person>",
        "contentType": "text/xml"
      },
      "key": "jsonToXml",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "json",
          "required": true,
          "comments": "JSON data to convert to XML",
          "example": "{\n  \"person\": {\n    \"first\": \"Bob\",\n    \"last\": \"Johnson\"\n  },\n  \"dob\": \"1990-01-01\"\n}",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "jsonToYaml": {
      "display": {
        "label": "JSON to YAML",
        "description": "Convert JSON to YAML"
      },
      "examplePayload": {
        "data": "---\nperson:\n  first: Bob\n  last: Johnson\ndob: '1990-01-01'",
        "contentType": "text/yaml"
      },
      "key": "jsonToYaml",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "json",
          "required": true,
          "comments": "JSON data to convert to YAML",
          "example": "{\n  \"person\": {\n    \"first\": \"Bob\",\n    \"last\": \"Johnson\"\n  },\n  \"dob\": \"1990-01-01\"\n}",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "jsonToCsv": {
      "display": {
        "label": "JSON to CSV",
        "description": "Convert JSON to CSV"
      },
      "examplePayload": {
        "data": "\"person__first\",\"person__last\",\"dob\"\n\"Bob\",\"Johnson\",\"1990-01-01\"",
        "contentType": "text/csv"
      },
      "key": "jsonToCsv",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "json",
          "required": true,
          "comments": "JSON data to convert to CSV",
          "example": "{\n  \"person\": {\n    \"first\": \"Bob\",\n    \"last\": \"Johnson\"\n  },\n  \"dob\": \"1990-01-01\"\n}",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "xmlToJson": {
      "display": {
        "label": "XML to JSON",
        "description": "Convert XML to JSON"
      },
      "examplePayload": {
        "data": "{\n  \"person\": {\n    \"first\": \"Bob\",\n    \"last\": \"Johnson\"\n  },\n  \"dob\": \"1990-01-01\"\n}",
        "contentType": "application/json"
      },
      "key": "xmlToJson",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "xml",
          "required": true,
          "comments": "XML data to convert to JSON",
          "example": "<dob>1990-01-01</dob>\n<person>\n  <first>Bob</first>\n  <last>Johnson</last>\n</person>",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        },
        {
          "required": false,
          "comments": "Interpret numbers as strings?",
          "key": "numbersAsStrings",
          "type": "boolean",
          "default": "false",
          "label": "Parse numbers as strings?"
        }
      ]
    },
    "xmlToYaml": {
      "display": {
        "label": "XML to YAML",
        "description": "Convert XML to YAML"
      },
      "examplePayload": {
        "data": "---\nperson:\n  first: Bob\n  last: Johnson\ndob: '1990-01-01'",
        "contentType": "text/yaml"
      },
      "key": "xmlToYaml",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "xml",
          "required": true,
          "comments": "XML data to convert to YAML",
          "example": "<dob>1990-01-01</dob>\n<person>\n  <first>Bob</first>\n  <last>Johnson</last>\n</person>",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        },
        {
          "required": false,
          "comments": "Interpret numbers as strings?",
          "key": "numbersAsStrings",
          "type": "boolean",
          "default": "false",
          "label": "Parse numbers as strings?"
        }
      ]
    },
    "xmlToCsv": {
      "display": {
        "label": "XML to CSV",
        "description": "Convert XML to CSV"
      },
      "examplePayload": {
        "data": "\"person__first\",\"person__last\",\"dob\"\n\"Bob\",\"Johnson\",\"1990-01-01\"",
        "contentType": "text/csv"
      },
      "key": "xmlToCsv",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "xml",
          "required": true,
          "comments": "XML data to convert to CSV",
          "example": "<dob>1990-01-01</dob>\n<person>\n  <first>Bob</first>\n  <last>Johnson</last>\n</person>",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        },
        {
          "required": false,
          "comments": "Interpret numbers as strings?",
          "key": "numbersAsStrings",
          "type": "boolean",
          "default": "false",
          "label": "Parse numbers as strings?"
        }
      ]
    },
    "yamlToJson": {
      "display": {
        "label": "YAML to JSON",
        "description": "Convert YAML to JSON"
      },
      "examplePayload": {
        "data": "{\n  \"person\": {\n    \"first\": \"Bob\",\n    \"last\": \"Johnson\"\n  },\n  \"dob\": \"1990-01-01\"\n}",
        "contentType": "application/json"
      },
      "key": "yamlToJson",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "yaml",
          "required": true,
          "comments": "YAML data to convert to JSON",
          "example": "---\nperson:\n  first: Bob\n  last: Johnson\ndob: '1990-01-01'",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "yamlToXml": {
      "display": {
        "label": "YAML to XML",
        "description": "Convert YAML to XML"
      },
      "examplePayload": {
        "data": "<dob>1990-01-01</dob>\n<person>\n  <first>Bob</first>\n  <last>Johnson</last>\n</person>",
        "contentType": "text/xml"
      },
      "key": "yamlToXml",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "yaml",
          "required": true,
          "comments": "YAML data to convert to XML",
          "example": "---\nperson:\n  first: Bob\n  last: Johnson\ndob: '1990-01-01'",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "yamlToCsv": {
      "display": {
        "label": "YAML to CSV",
        "description": "Convert YAML to CSV"
      },
      "examplePayload": {
        "data": "\"person__first\",\"person__last\",\"dob\"\n\"Bob\",\"Johnson\",\"1990-01-01\"",
        "contentType": "text/csv"
      },
      "key": "yamlToCsv",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "yaml",
          "required": true,
          "comments": "YAML data to convert to CSV",
          "example": "---\nperson:\n  first: Bob\n  last: Johnson\ndob: '1990-01-01'",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "binaryToJson": {
      "display": {
        "label": "JavaScript Object to JSON",
        "description": "Convert JavaScript Object to JSON"
      },
      "examplePayload": {
        "data": "{\n  \"person\": {\n    \"first\": \"Bob\",\n    \"last\": \"Johnson\"\n  },\n  \"dob\": \"1990-01-01\"\n}",
        "contentType": "application/json"
      },
      "key": "binaryToJson",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": null,
          "required": true,
          "comments": "JavaScript Object data to convert to JSON",
          "example": null,
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "binaryToXml": {
      "display": {
        "label": "JavaScript Object to XML",
        "description": "Convert JavaScript Object to XML"
      },
      "examplePayload": {
        "data": "<dob>1990-01-01</dob>\n<person>\n  <first>Bob</first>\n  <last>Johnson</last>\n</person>",
        "contentType": "text/xml"
      },
      "key": "binaryToXml",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": null,
          "required": true,
          "comments": "JavaScript Object data to convert to XML",
          "example": null,
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "binaryToYaml": {
      "display": {
        "label": "JavaScript Object to YAML",
        "description": "Convert JavaScript Object to YAML"
      },
      "examplePayload": {
        "data": "---\nperson:\n  first: Bob\n  last: Johnson\ndob: '1990-01-01'",
        "contentType": "text/yaml"
      },
      "key": "binaryToYaml",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": null,
          "required": true,
          "comments": "JavaScript Object data to convert to YAML",
          "example": null,
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "binaryToCsv": {
      "display": {
        "label": "JavaScript Object to CSV",
        "description": "Convert JavaScript Object to CSV"
      },
      "examplePayload": {
        "data": "\"person__first\",\"person__last\",\"dob\"\n\"Bob\",\"Johnson\",\"1990-01-01\"",
        "contentType": "text/csv"
      },
      "key": "binaryToCsv",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": null,
          "required": true,
          "comments": "JavaScript Object data to convert to CSV",
          "example": null,
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "csvToJson": {
      "display": {
        "label": "CSV to JSON",
        "description": "Convert CSV to JSON"
      },
      "examplePayload": {
        "data": "{\n  \"person\": {\n    \"first\": \"Bob\",\n    \"last\": \"Johnson\"\n  },\n  \"dob\": \"1990-01-01\"\n}",
        "contentType": "application/json"
      },
      "key": "csvToJson",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "csv",
          "required": true,
          "comments": "CSV data to convert to JSON",
          "example": "\"person__first\",\"person__last\",\"dob\"\n\"Bob\",\"Johnson\",\"1990-01-01\"",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        },
        {
          "required": false,
          "comments": "Specify if your CSV contains a header row.",
          "key": "isHeader",
          "type": "boolean",
          "default": "true",
          "label": "CSV Header"
        },
        {
          "required": true,
          "comments": "When enabled, keys with double-underscores will be parsed as nested objects. For example, 'person__first,person__last' will become '{ person: { first, last } }' rather than '{ person__first, person__last }'",
          "key": "unFlattenCsvKeys",
          "type": "boolean",
          "default": "false",
          "label": "Un-Flatten CSV Keys"
        }
      ]
    },
    "csvToXml": {
      "display": {
        "label": "CSV to XML",
        "description": "Convert CSV to XML"
      },
      "examplePayload": {
        "data": "<dob>1990-01-01</dob>\n<person>\n  <first>Bob</first>\n  <last>Johnson</last>\n</person>",
        "contentType": "text/xml"
      },
      "key": "csvToXml",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "csv",
          "required": true,
          "comments": "CSV data to convert to XML",
          "example": "\"person__first\",\"person__last\",\"dob\"\n\"Bob\",\"Johnson\",\"1990-01-01\"",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        },
        {
          "required": false,
          "comments": "Specify if your CSV contains a header row.",
          "key": "isHeader",
          "type": "boolean",
          "default": "true",
          "label": "CSV Header"
        },
        {
          "required": true,
          "comments": "When enabled, keys with double-underscores will be parsed as nested objects. For example, 'person__first,person__last' will become '{ person: { first, last } }' rather than '{ person__first, person__last }'",
          "key": "unFlattenCsvKeys",
          "type": "boolean",
          "default": "false",
          "label": "Un-Flatten CSV Keys"
        }
      ]
    },
    "csvToYaml": {
      "display": {
        "label": "CSV to YAML",
        "description": "Convert CSV to YAML"
      },
      "examplePayload": {
        "data": "---\nperson:\n  first: Bob\n  last: Johnson\ndob: '1990-01-01'",
        "contentType": "text/yaml"
      },
      "key": "csvToYaml",
      "inputs": [
        {
          "placeholder": "Data to change format of",
          "language": "csv",
          "required": true,
          "comments": "CSV data to convert to YAML",
          "example": "\"person__first\",\"person__last\",\"dob\"\n\"Bob\",\"Johnson\",\"1990-01-01\"",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        },
        {
          "required": false,
          "comments": "Specify if your CSV contains a header row.",
          "key": "isHeader",
          "type": "boolean",
          "default": "true",
          "label": "CSV Header"
        },
        {
          "required": true,
          "comments": "When enabled, keys with double-underscores will be parsed as nested objects. For example, 'person__first,person__last' will become '{ person: { first, last } }' rather than '{ person__first, person__last }'",
          "key": "unFlattenCsvKeys",
          "type": "boolean",
          "default": "false",
          "label": "Un-Flatten CSV Keys"
        }
      ]
    },
    "deserializeJsonl": {
      "display": {
        "label": "Deserialize JSON Lines (.jsonl)",
        "description": "Transform .jsonl data to a JavaScript array"
      },
      "key": "deserializeJsonl",
      "inputs": [
        {
          "required": true,
          "example": "[\"Name\", \"Session\", \"Score\", \"Completed\"]\n[\"Gilbert\", \"2013\", 24, true]\n[\"Alexa\", \"2013\", 29, true]\n[\"May\", \"2012B\", 14, false]\n[\"Deloise\", \"2012A\", 19, true]",
          "key": "jsonl",
          "type": "code",
          "default": "",
          "label": "JSONL Data"
        }
      ]
    },
    "serializeJsonl": {
      "display": {
        "label": "Serialize JSON Lines (.jsonl)",
        "description": "Serialize an array of JavaScript objects into .jsonl"
      },
      "key": "serializeJsonl",
      "inputs": [
        {
          "comments": "Must be a reference to an array of JavaScript objects",
          "required": true,
          "key": "array",
          "type": "string",
          "default": "",
          "label": "Array of JavaScript Objects to serialize"
        }
      ]
    },
    "deserializeFormData": {
      "display": {
        "label": "Deserialize URL-encoded Form Data",
        "description": "Deserialize Form Data (x-www-form-urlencoded)"
      },
      "examplePayload": {
        "data": {
          "foo": "bar",
          "baz": "123"
        }
      },
      "key": "deserializeFormData",
      "inputs": [
        {
          "placeholder": "Data to deserialize",
          "required": true,
          "comments": "Form data to deserialize so it can be referenced in a subsequent step.",
          "example": "foo=bar&baz=123",
          "key": "data",
          "type": "string",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "serializeFormData": {
      "display": {
        "label": "Serialize URL-encoded Form Data",
        "description": "Serialize Form Data (x-www-form-urlencoded)"
      },
      "examplePayload": {
        "data": "foo=bar&baz=123"
      },
      "key": "serializeFormData",
      "inputs": [
        {
          "placeholder": "Data to serialize",
          "language": "json",
          "required": true,
          "comments": "Form data to deserialize so it can be referenced in a subsequent step.",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    },
    "convertToBoolean": {
      "display": {
        "label": "Convert To Boolean",
        "description": "Convert a value to a number"
      },
      "key": "convertToBoolean",
      "inputs": [
        {
          "required": true,
          "key": "value",
          "type": "string",
          "default": "",
          "label": "The value to be converted to a boolean"
        }
      ]
    },
    "convertToInt": {
      "display": {
        "label": "Convert To Integer",
        "description": "Convert a value to an int"
      },
      "key": "convertToInt",
      "inputs": [
        {
          "required": true,
          "key": "value",
          "type": "string",
          "default": "",
          "label": "The value to be converted to a integer"
        }
      ]
    },
    "convertToString": {
      "display": {
        "label": "Convert To String",
        "description": "Convert a value to a string"
      },
      "key": "convertToString",
      "inputs": [
        {
          "required": true,
          "key": "value",
          "type": "string",
          "default": "",
          "label": "The value to be converted to a string"
        }
      ]
    },
    "convertToNumber": {
      "display": {
        "label": "Convert To Number",
        "description": "Convert a value to a number"
      },
      "key": "convertToNumber",
      "inputs": [
        {
          "required": true,
          "key": "value",
          "type": "string",
          "default": "",
          "label": "The value to be converted to a number"
        }
      ]
    },
    "prettyPrint": {
      "display": {
        "label": "Pretty Print",
        "description": "Format data to be more human-readable"
      },
      "key": "prettyPrint",
      "inputs": [
        {
          "placeholder": "Data to pretty print",
          "required": true,
          "comments": "Data to pretty print",
          "key": "data",
          "type": "text",
          "default": "",
          "label": "Data"
        }
      ]
    }
  },
  "triggers": {},
  "dataSources": {},
  "documentation": {
    "description": "The **change data format** component allows you to convert data between common formats, like JSON, XML, CSV, and YAML, and to serialize (turn an object into a string) or deserialize (turn a string into an object) each supported format.\n",
    "dev": "For example, the \"JSON to XML\" action will convert a JSON string that looks like this:\n\n```json\n{\n  \"user\": {\n    \"name\": \"John Doe\",\n    \"dob\": \"19880101\",\n    \"phones\": [\"555-123-4567\", \"555-555-5555\"]\n  }\n}\n```\n\ninto an XML string that looks like this:\n\n```xml\n<user>\n  <name>John Doe</name>\n  <dob>19880101</dob>\n  <phones>555-123-4567</phones>\n  <phones>555-555-5555</phones>\n</user>\n```\n\nA \"Deserialize XML\" action, when run on the above XML, would convert the XML into an object whose keys can be referenced in subsequent steps.\n\n<Screenshot filename=\"components/deserialize-xml.png\" />\n"
  },
  "$version": 1
}
