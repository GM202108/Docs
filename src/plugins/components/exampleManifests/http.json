{
  "key": "http",
  "documentationUrl": "https://prismatic.io/docs/components/http/",
  "public": true,
  "display": {
    "label": "HTTP",
    "description": "Make HTTP requests to URLs such as REST APIs, Webhooks, etc",
    "iconPath": "icon.png",
    "category": "Helpers",
    "iconBase64": ""
  },
  "connections": [
    {
      "key": "apiKey",
      "label": "API Key",
      "comments": "API Key connection",
      "inputs": [
        {
          "placeholder": "API Key",
          "required": true,
          "shown": true,
          "comments": "API Key",
          "key": "apiKey",
          "type": "string",
          "default": "",
          "label": "API Key"
        }
      ],
      "documentation": {
        "description": "If an API Key Connection is supplied, an `Authorization: Basic ${APIKEY}` header is used in the HTTP request.\n"
      }
    },
    {
      "key": "authorizationCode",
      "label": "OAuth 2.0 Authorization Code",
      "comments": "OAuth 2.0 Authorization Code flow",
      "oauth2Type": "authorization_code",
      "inputs": [
        {
          "placeholder": "Authorize URL",
          "required": true,
          "shown": true,
          "comments": "The OAuth 2.0 Authorization URL for the API",
          "key": "authorizeUrl",
          "type": "string",
          "default": "",
          "label": "Authorize URL"
        },
        {
          "placeholder": "Token URL",
          "required": true,
          "shown": true,
          "comments": "The OAuth 2.0 Token URL for the API",
          "key": "tokenUrl",
          "type": "string",
          "default": "",
          "label": "Token URL"
        },
        {
          "placeholder": "Scopes",
          "required": false,
          "shown": true,
          "comments": "Space separated OAuth 2.0 permission scopes for the API",
          "key": "scopes",
          "type": "string",
          "default": "",
          "label": "Scopes"
        },
        {
          "placeholder": "Client ID",
          "required": true,
          "shown": true,
          "comments": "Client Identifier of your app for the API",
          "key": "clientId",
          "type": "string",
          "default": "",
          "label": "Client ID"
        },
        {
          "placeholder": "Client Secret",
          "required": true,
          "shown": true,
          "comments": "Client Secret of your app for the API",
          "key": "clientSecret",
          "type": "password",
          "default": "",
          "label": "Client Secret"
        },
        {
          "required": false,
          "shown": true,
          "comments": "Additional header to supply to authorization requests",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Headers"
        }
      ],
      "documentation": {
        "description": "If an OAuth 2.0 Connection are supplied, an `Authorization: Bearer ${KEY}` header is used in the HTTP request, where `KEY` is the client key that is fetched from the OAuth provider.\n"
      }
    },
    {
      "key": "clientCredentials",
      "label": "OAuth 2.0 Client Credentials",
      "comments": "OAuth 2.0 Client Credentials flow",
      "oauth2Type": "client_credentials",
      "inputs": [
        {
          "placeholder": "Token URL",
          "required": true,
          "shown": true,
          "comments": "The OAuth 2.0 Token URL for the API",
          "key": "tokenUrl",
          "type": "string",
          "default": "",
          "label": "Token URL"
        },
        {
          "placeholder": "Scopes",
          "required": false,
          "shown": true,
          "comments": "Space separated OAuth 2.0 permission scopes for the API",
          "key": "scopes",
          "type": "string",
          "default": "",
          "label": "Scopes"
        },
        {
          "placeholder": "Client ID",
          "required": true,
          "shown": true,
          "comments": "Client Identifier of your app for the API",
          "key": "clientId",
          "type": "string",
          "default": "",
          "label": "Client ID"
        },
        {
          "placeholder": "Client Secret",
          "required": true,
          "shown": true,
          "comments": "Client Secret of your app for the API",
          "key": "clientSecret",
          "type": "string",
          "default": "",
          "label": "Client Secret"
        },
        {
          "required": false,
          "shown": true,
          "comments": "Additional header to supply to token requests",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Headers"
        }
      ]
    },
    {
      "key": "basic",
      "label": "Basic Username/Password",
      "comments": "Basic Username and Password connection",
      "inputs": [
        {
          "placeholder": "Username",
          "required": true,
          "shown": true,
          "comments": "Username",
          "key": "username",
          "type": "string",
          "default": "",
          "label": "Username"
        },
        {
          "placeholder": "Password",
          "required": true,
          "shown": true,
          "comments": "Password",
          "key": "password",
          "type": "password",
          "default": "",
          "label": "Password"
        }
      ],
      "documentation": {
        "description": "If a Basic Auth Connection is supplied, an `Authorization: Basic ${base64(USERNAME:PASSWORD)}` header is used in the HTTP request.\n"
      }
    }
  ],
  "actions": {
    "httpGet": {
      "display": {
        "label": "GET Request",
        "description": "Issue a HTTP GET request"
      },
      "examplePayload": {
        "data": null,
        "contentType": "application/json"
      },
      "key": "httpGet",
      "inputs": [
        {
          "required": false,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "placeholder": "URL to call",
          "required": true,
          "comments": "This is the URL to call.",
          "example": "https://api.company.com/endpoint",
          "key": "url",
          "type": "string",
          "default": "",
          "label": "URL"
        },
        {
          "placeholder": "Response Type",
          "required": false,
          "comments": "The type of data you expect in the response. You can request json, text, or binary data.",
          "model": [
            {
              "label": "JSON",
              "value": "json"
            },
            {
              "label": "Text",
              "value": "text"
            },
            {
              "label": "Binary",
              "value": "binary"
            }
          ],
          "example": "binary",
          "key": "responseType",
          "type": "string",
          "default": "json",
          "label": "Response Type"
        },
        {
          "placeholder": "Header",
          "required": false,
          "comments": "A list of headers to send with the request.",
          "example": "User-Agent: curl/7.64.1",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Header"
        },
        {
          "placeholder": "Query Parameter",
          "required": false,
          "comments": "A list of query parameters to send with the request. This is the portion at the end of the URL similar to ?key1=value1&key2=value2.",
          "key": "queryParams",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Query Parameter"
        },
        {
          "placeholder": "Max Retries",
          "required": false,
          "comments": "The maximum number of retries to attempt.",
          "key": "maxRetries",
          "type": "string",
          "default": "0",
          "label": "Max Retry Count"
        },
        {
          "placeholder": "Retry Delay",
          "required": false,
          "comments": "The delay in milliseconds between retries.",
          "key": "retryDelayMS",
          "type": "string",
          "default": "0",
          "label": "Retry Delay (ms)"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "Specifies whether to use a pre-defined exponential backoff strategy for retries. If this is set to true, 'Retry Delay (ms)' is ignored.",
          "key": "useExponentialBackoff",
          "type": "boolean",
          "default": "false",
          "label": "Use Exponential Backoff"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "If true, retries on all erroneous responses regardless of type. This is helpful when retrying after HTTP 429 or other 3xx or 4xx errors. Otherwise, only retries on HTTP 5xx and network errors.",
          "key": "retryOnAllErrors",
          "type": "boolean",
          "default": "false",
          "label": "Retry On All Errors"
        },
        {
          "required": false,
          "comments": "The maximum time that a client will await a response to its request",
          "example": "2000",
          "key": "timeout",
          "type": "string",
          "default": "",
          "label": "Timeout"
        },
        {
          "required": false,
          "comments": "Enabling this flag will include the full response instead of only the returned data.",
          "key": "includeFullResponse",
          "type": "boolean",
          "default": "false",
          "label": "Include Full Response"
        },
        {
          "required": false,
          "comments": "Enabling this flag will log out the current request.",
          "key": "debugRequest",
          "type": "boolean",
          "default": "false",
          "label": "Debug Request"
        },
        {
          "required": true,
          "comments": "When this flag is enabled, SSL certificate errors will be ignored. Use this flag with caution - ignoring SSL errors presents security issues. This should only be used for testing purposes.",
          "key": "ignoreSslErrors",
          "type": "boolean",
          "default": "false",
          "label": "Ignore SSL Errors (Not Recommended)"
        }
      ]
    },
    "httpPost": {
      "display": {
        "label": "POST Request",
        "description": "Issue a HTTP POST request"
      },
      "examplePayload": {
        "data": null,
        "contentType": "application/json"
      },
      "key": "httpPost",
      "inputs": [
        {
          "required": false,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "placeholder": "URL to call",
          "required": true,
          "comments": "This is the URL to call.",
          "example": "https://api.company.com/endpoint",
          "key": "url",
          "type": "string",
          "default": "",
          "label": "URL"
        },
        {
          "placeholder": "Data to send",
          "required": true,
          "comments": "The HTTP body payload to send to the URL. Must be a string or a reference to output from a previous step.",
          "example": "{\"exampleKey\": \"Example Data\"}",
          "key": "data",
          "type": "string",
          "default": "",
          "label": "Data"
        },
        {
          "placeholder": "Response Type",
          "required": false,
          "comments": "The type of data you expect in the response. You can request json, text, or binary data.",
          "model": [
            {
              "label": "JSON",
              "value": "json"
            },
            {
              "label": "Text",
              "value": "text"
            },
            {
              "label": "Binary",
              "value": "binary"
            }
          ],
          "example": "binary",
          "key": "responseType",
          "type": "string",
          "default": "json",
          "label": "Response Type"
        },
        {
          "placeholder": "Header",
          "required": false,
          "comments": "A list of headers to send with the request.",
          "example": "User-Agent: curl/7.64.1",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Header"
        },
        {
          "placeholder": "Query Parameter",
          "required": false,
          "comments": "A list of query parameters to send with the request. This is the portion at the end of the URL similar to ?key1=value1&key2=value2.",
          "key": "queryParams",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Query Parameter"
        },
        {
          "placeholder": "Max Retries",
          "required": false,
          "comments": "The maximum number of retries to attempt.",
          "key": "maxRetries",
          "type": "string",
          "default": "0",
          "label": "Max Retry Count"
        },
        {
          "placeholder": "Retry Delay",
          "required": false,
          "comments": "The delay in milliseconds between retries.",
          "key": "retryDelayMS",
          "type": "string",
          "default": "0",
          "label": "Retry Delay (ms)"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "Specifies whether to use a pre-defined exponential backoff strategy for retries. If this is set to true, 'Retry Delay (ms)' is ignored.",
          "key": "useExponentialBackoff",
          "type": "boolean",
          "default": "false",
          "label": "Use Exponential Backoff"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "If true, retries on all erroneous responses regardless of type. This is helpful when retrying after HTTP 429 or other 3xx or 4xx errors. Otherwise, only retries on HTTP 5xx and network errors.",
          "key": "retryOnAllErrors",
          "type": "boolean",
          "default": "false",
          "label": "Retry On All Errors"
        },
        {
          "required": false,
          "comments": "The maximum time that a client will await a response to its request",
          "example": "2000",
          "key": "timeout",
          "type": "string",
          "default": "",
          "label": "Timeout"
        },
        {
          "required": false,
          "comments": "Enabling this flag will include the full response instead of only the returned data.",
          "key": "includeFullResponse",
          "type": "boolean",
          "default": "false",
          "label": "Include Full Response"
        },
        {
          "required": false,
          "comments": "Enabling this flag will log out the current request.",
          "key": "debugRequest",
          "type": "boolean",
          "default": "false",
          "label": "Debug Request"
        },
        {
          "required": true,
          "comments": "When this flag is enabled, SSL certificate errors will be ignored. Use this flag with caution - ignoring SSL errors presents security issues. This should only be used for testing purposes.",
          "key": "ignoreSslErrors",
          "type": "boolean",
          "default": "false",
          "label": "Ignore SSL Errors (Not Recommended)"
        }
      ]
    },
    "httpPut": {
      "display": {
        "label": "PUT request",
        "description": "Issue a HTTP PUT request"
      },
      "examplePayload": {
        "data": null,
        "contentType": "application/json"
      },
      "key": "httpPut",
      "inputs": [
        {
          "required": false,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "placeholder": "URL to call",
          "required": true,
          "comments": "This is the URL to call.",
          "example": "https://api.company.com/endpoint",
          "key": "url",
          "type": "string",
          "default": "",
          "label": "URL"
        },
        {
          "placeholder": "Data to send",
          "required": true,
          "comments": "The HTTP body payload to send to the URL. Must be a string or a reference to output from a previous step.",
          "example": "{\"exampleKey\": \"Example Data\"}",
          "key": "data",
          "type": "string",
          "default": "",
          "label": "Data"
        },
        {
          "placeholder": "Response Type",
          "required": false,
          "comments": "The type of data you expect in the response. You can request json, text, or binary data.",
          "model": [
            {
              "label": "JSON",
              "value": "json"
            },
            {
              "label": "Text",
              "value": "text"
            },
            {
              "label": "Binary",
              "value": "binary"
            }
          ],
          "example": "binary",
          "key": "responseType",
          "type": "string",
          "default": "json",
          "label": "Response Type"
        },
        {
          "placeholder": "Header",
          "required": false,
          "comments": "A list of headers to send with the request.",
          "example": "User-Agent: curl/7.64.1",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Header"
        },
        {
          "placeholder": "Query Parameter",
          "required": false,
          "comments": "A list of query parameters to send with the request. This is the portion at the end of the URL similar to ?key1=value1&key2=value2.",
          "key": "queryParams",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Query Parameter"
        },
        {
          "placeholder": "Max Retries",
          "required": false,
          "comments": "The maximum number of retries to attempt.",
          "key": "maxRetries",
          "type": "string",
          "default": "0",
          "label": "Max Retry Count"
        },
        {
          "placeholder": "Retry Delay",
          "required": false,
          "comments": "The delay in milliseconds between retries.",
          "key": "retryDelayMS",
          "type": "string",
          "default": "0",
          "label": "Retry Delay (ms)"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "Specifies whether to use a pre-defined exponential backoff strategy for retries. If this is set to true, 'Retry Delay (ms)' is ignored.",
          "key": "useExponentialBackoff",
          "type": "boolean",
          "default": "false",
          "label": "Use Exponential Backoff"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "If true, retries on all erroneous responses regardless of type. This is helpful when retrying after HTTP 429 or other 3xx or 4xx errors. Otherwise, only retries on HTTP 5xx and network errors.",
          "key": "retryOnAllErrors",
          "type": "boolean",
          "default": "false",
          "label": "Retry On All Errors"
        },
        {
          "required": false,
          "comments": "The maximum time that a client will await a response to its request",
          "example": "2000",
          "key": "timeout",
          "type": "string",
          "default": "",
          "label": "Timeout"
        },
        {
          "required": false,
          "comments": "Enabling this flag will include the full response instead of only the returned data.",
          "key": "includeFullResponse",
          "type": "boolean",
          "default": "false",
          "label": "Include Full Response"
        },
        {
          "required": false,
          "comments": "Enabling this flag will log out the current request.",
          "key": "debugRequest",
          "type": "boolean",
          "default": "false",
          "label": "Debug Request"
        },
        {
          "required": true,
          "comments": "When this flag is enabled, SSL certificate errors will be ignored. Use this flag with caution - ignoring SSL errors presents security issues. This should only be used for testing purposes.",
          "key": "ignoreSslErrors",
          "type": "boolean",
          "default": "false",
          "label": "Ignore SSL Errors (Not Recommended)"
        }
      ]
    },
    "httpPatch": {
      "display": {
        "label": "PATCH request",
        "description": "Issue a HTTP PATCH request"
      },
      "examplePayload": {
        "data": null,
        "contentType": "application/json"
      },
      "key": "httpPatch",
      "inputs": [
        {
          "required": false,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "placeholder": "URL to call",
          "required": true,
          "comments": "This is the URL to call.",
          "example": "https://api.company.com/endpoint",
          "key": "url",
          "type": "string",
          "default": "",
          "label": "URL"
        },
        {
          "placeholder": "Data to send",
          "required": true,
          "comments": "The HTTP body payload to send to the URL. Must be a string or a reference to output from a previous step.",
          "example": "{\"exampleKey\": \"Example Data\"}",
          "key": "data",
          "type": "string",
          "default": "",
          "label": "Data"
        },
        {
          "placeholder": "Response Type",
          "required": false,
          "comments": "The type of data you expect in the response. You can request json, text, or binary data.",
          "model": [
            {
              "label": "JSON",
              "value": "json"
            },
            {
              "label": "Text",
              "value": "text"
            },
            {
              "label": "Binary",
              "value": "binary"
            }
          ],
          "example": "binary",
          "key": "responseType",
          "type": "string",
          "default": "json",
          "label": "Response Type"
        },
        {
          "placeholder": "Header",
          "required": false,
          "comments": "A list of headers to send with the request.",
          "example": "User-Agent: curl/7.64.1",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Header"
        },
        {
          "placeholder": "Query Parameter",
          "required": false,
          "comments": "A list of query parameters to send with the request. This is the portion at the end of the URL similar to ?key1=value1&key2=value2.",
          "key": "queryParams",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Query Parameter"
        },
        {
          "placeholder": "Max Retries",
          "required": false,
          "comments": "The maximum number of retries to attempt.",
          "key": "maxRetries",
          "type": "string",
          "default": "0",
          "label": "Max Retry Count"
        },
        {
          "placeholder": "Retry Delay",
          "required": false,
          "comments": "The delay in milliseconds between retries.",
          "key": "retryDelayMS",
          "type": "string",
          "default": "0",
          "label": "Retry Delay (ms)"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "Specifies whether to use a pre-defined exponential backoff strategy for retries. If this is set to true, 'Retry Delay (ms)' is ignored.",
          "key": "useExponentialBackoff",
          "type": "boolean",
          "default": "false",
          "label": "Use Exponential Backoff"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "If true, retries on all erroneous responses regardless of type. This is helpful when retrying after HTTP 429 or other 3xx or 4xx errors. Otherwise, only retries on HTTP 5xx and network errors.",
          "key": "retryOnAllErrors",
          "type": "boolean",
          "default": "false",
          "label": "Retry On All Errors"
        },
        {
          "required": false,
          "comments": "The maximum time that a client will await a response to its request",
          "example": "2000",
          "key": "timeout",
          "type": "string",
          "default": "",
          "label": "Timeout"
        },
        {
          "required": false,
          "comments": "Enabling this flag will include the full response instead of only the returned data.",
          "key": "includeFullResponse",
          "type": "boolean",
          "default": "false",
          "label": "Include Full Response"
        },
        {
          "required": false,
          "comments": "Enabling this flag will log out the current request.",
          "key": "debugRequest",
          "type": "boolean",
          "default": "false",
          "label": "Debug Request"
        },
        {
          "required": true,
          "comments": "When this flag is enabled, SSL certificate errors will be ignored. Use this flag with caution - ignoring SSL errors presents security issues. This should only be used for testing purposes.",
          "key": "ignoreSslErrors",
          "type": "boolean",
          "default": "false",
          "label": "Ignore SSL Errors (Not Recommended)"
        }
      ]
    },
    "httpDelete": {
      "display": {
        "label": "DELETE request",
        "description": "Issue a HTTP DELETE request"
      },
      "examplePayload": {
        "data": null,
        "contentType": "application/json"
      },
      "key": "httpDelete",
      "inputs": [
        {
          "required": false,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "placeholder": "URL to call",
          "required": true,
          "comments": "This is the URL to call.",
          "example": "https://api.company.com/endpoint",
          "key": "url",
          "type": "string",
          "default": "",
          "label": "URL"
        },
        {
          "placeholder": "Response Type",
          "required": false,
          "comments": "The type of data you expect in the response. You can request json, text, or binary data.",
          "model": [
            {
              "label": "JSON",
              "value": "json"
            },
            {
              "label": "Text",
              "value": "text"
            },
            {
              "label": "Binary",
              "value": "binary"
            }
          ],
          "example": "binary",
          "key": "responseType",
          "type": "string",
          "default": "json",
          "label": "Response Type"
        },
        {
          "placeholder": "Header",
          "required": false,
          "comments": "A list of headers to send with the request.",
          "example": "User-Agent: curl/7.64.1",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Header"
        },
        {
          "placeholder": "Query Parameter",
          "required": false,
          "comments": "A list of query parameters to send with the request. This is the portion at the end of the URL similar to ?key1=value1&key2=value2.",
          "key": "queryParams",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Query Parameter"
        },
        {
          "placeholder": "Max Retries",
          "required": false,
          "comments": "The maximum number of retries to attempt.",
          "key": "maxRetries",
          "type": "string",
          "default": "0",
          "label": "Max Retry Count"
        },
        {
          "placeholder": "Retry Delay",
          "required": false,
          "comments": "The delay in milliseconds between retries.",
          "key": "retryDelayMS",
          "type": "string",
          "default": "0",
          "label": "Retry Delay (ms)"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "Specifies whether to use a pre-defined exponential backoff strategy for retries. If this is set to true, 'Retry Delay (ms)' is ignored.",
          "key": "useExponentialBackoff",
          "type": "boolean",
          "default": "false",
          "label": "Use Exponential Backoff"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "If true, retries on all erroneous responses regardless of type. This is helpful when retrying after HTTP 429 or other 3xx or 4xx errors. Otherwise, only retries on HTTP 5xx and network errors.",
          "key": "retryOnAllErrors",
          "type": "boolean",
          "default": "false",
          "label": "Retry On All Errors"
        },
        {
          "required": false,
          "comments": "The maximum time that a client will await a response to its request",
          "example": "2000",
          "key": "timeout",
          "type": "string",
          "default": "",
          "label": "Timeout"
        },
        {
          "required": false,
          "comments": "Enabling this flag will include the full response instead of only the returned data.",
          "key": "includeFullResponse",
          "type": "boolean",
          "default": "false",
          "label": "Include Full Response"
        },
        {
          "required": false,
          "comments": "Enabling this flag will log out the current request.",
          "key": "debugRequest",
          "type": "boolean",
          "default": "false",
          "label": "Debug Request"
        },
        {
          "required": true,
          "comments": "When this flag is enabled, SSL certificate errors will be ignored. Use this flag with caution - ignoring SSL errors presents security issues. This should only be used for testing purposes.",
          "key": "ignoreSslErrors",
          "type": "boolean",
          "default": "false",
          "label": "Ignore SSL Errors (Not Recommended)"
        }
      ]
    },
    "httpPostFormData": {
      "display": {
        "label": "POST/PUT Form Data Request",
        "description": "POST/PUT data as multipart/form-data. Often useful for uploading binary data."
      },
      "key": "httpPostFormData",
      "inputs": [
        {
          "required": false,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "placeholder": "URL to call",
          "required": true,
          "comments": "This is the URL to call.",
          "example": "https://api.company.com/endpoint",
          "key": "url",
          "type": "string",
          "default": "",
          "label": "URL"
        },
        {
          "model": [
            {
              "label": "POST",
              "value": "post"
            },
            {
              "label": "PUT",
              "value": "put"
            }
          ],
          "required": true,
          "key": "httpMethod",
          "type": "string",
          "default": "post",
          "label": "HTTP Method"
        },
        {
          "placeholder": "Response Type",
          "required": false,
          "comments": "The type of data you expect in the response. You can request json, text, or binary data.",
          "model": [
            {
              "label": "JSON",
              "value": "json"
            },
            {
              "label": "Text",
              "value": "text"
            },
            {
              "label": "Binary",
              "value": "binary"
            }
          ],
          "example": "binary",
          "key": "responseType",
          "type": "string",
          "default": "json",
          "label": "Response Type"
        },
        {
          "placeholder": "Max Retries",
          "required": false,
          "comments": "The maximum number of retries to attempt.",
          "key": "maxRetries",
          "type": "string",
          "default": "0",
          "label": "Max Retry Count"
        },
        {
          "placeholder": "Retry Delay",
          "required": false,
          "comments": "The delay in milliseconds between retries.",
          "key": "retryDelayMS",
          "type": "string",
          "default": "0",
          "label": "Retry Delay (ms)"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "Specifies whether to use a pre-defined exponential backoff strategy for retries. If this is set to true, 'Retry Delay (ms)' is ignored.",
          "key": "useExponentialBackoff",
          "type": "boolean",
          "default": "false",
          "label": "Use Exponential Backoff"
        },
        {
          "placeholder": "",
          "required": false,
          "comments": "If true, retries on all erroneous responses regardless of type. This is helpful when retrying after HTTP 429 or other 3xx or 4xx errors. Otherwise, only retries on HTTP 5xx and network errors.",
          "key": "retryOnAllErrors",
          "type": "boolean",
          "default": "false",
          "label": "Retry On All Errors"
        },
        {
          "placeholder": "Data to send",
          "required": false,
          "comments": "The Form Data to be sent as a multipart form upload.",
          "example": "[{\"key\": \"Example Key\", \"value\": new Buffer(\"Hello World\")}]",
          "key": "formData",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Form Data"
        },
        {
          "placeholder": "Data to send",
          "required": false,
          "comments": "File Data to be sent as a multipart form upload.",
          "example": "[{key: \"example.txt\", value: \"My File Contents\"}]",
          "key": "fileData",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "File Data"
        },
        {
          "placeholder": "The file name to apply to a file",
          "required": false,
          "comments": "File names to apply to the file data inputs. Keys must match the file data keys above.",
          "key": "fileDataFileNames",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "File Data File Names"
        },
        {
          "placeholder": "Header",
          "required": false,
          "comments": "A list of headers to send with the request.",
          "example": "User-Agent: curl/7.64.1",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Header"
        },
        {
          "placeholder": "Query Parameter",
          "required": false,
          "comments": "A list of query parameters to send with the request. This is the portion at the end of the URL similar to ?key1=value1&key2=value2.",
          "key": "queryParams",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Query Parameter"
        },
        {
          "required": false,
          "comments": "The maximum time that a client will await a response to its request",
          "example": "2000",
          "key": "timeout",
          "type": "string",
          "default": "",
          "label": "Timeout"
        },
        {
          "required": false,
          "comments": "Enabling this flag will include the full response instead of only the returned data.",
          "key": "includeFullResponse",
          "type": "boolean",
          "default": "false",
          "label": "Include Full Response"
        },
        {
          "required": false,
          "comments": "Enabling this flag will log out the current request.",
          "key": "debugRequest",
          "type": "boolean",
          "default": "false",
          "label": "Debug Request"
        },
        {
          "required": true,
          "comments": "When this flag is enabled, SSL certificate errors will be ignored. Use this flag with caution - ignoring SSL errors presents security issues. This should only be used for testing purposes.",
          "key": "ignoreSslErrors",
          "type": "boolean",
          "default": "false",
          "label": "Ignore SSL Errors (Not Recommended)"
        }
      ],
      "documentation": {
        "description": "The Post Form Data Action takes two possible inputs for data to be uploaded to an endpoint.\n\n- Form Data are key/value pairs. For example, `\"username\"/\"Groucho\"` and `\"accountnum\"/12345`. Values are turned into strings if they are not already. For more information see https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects\n- File Data is similar to form data but allows you to upload file contents. A `filename` property is automatically generated from the key. This should be used to upload files only. All other types of data should go through the Form Data Input.\n"
      }
    }
  },
  "triggers": {},
  "dataSources": {},
  "documentation": {
    "description": "The **HTTP** component allows you to make requests to an HTTP-based API or endpoint.\n",
    "dev": "Common HTTP verbs like GET, POST, PUT, PATCH, and DELETE are supported.\nFor all actions, you can specify:\n\n- A URL to send a request to\n- A response type (like `application/json`)\n- A list of request headers\n- A list of query parameters\n\nIn addition, the POST, PUT, and PATCH actions allow you to specify `data` to send as part of the request.\n`data` can be a reference to a binary file, a string literal, or any structured data that is expected in the body of the request.\n\nThis component can be configured to use optional Basic Auth (username/password), API Key, or OAuth 2.0 Connections to authenticate the request.\nFor other non-standard authentication schemes, you will either need to supply your own `Authorization` as a header as an input to the HTTP component, or you can create your own custom component to interact with an HTTP-based API.\n"
  },
  "$version": 1
}
