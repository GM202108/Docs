{
  "key": "code",
  "documentationUrl": "https://prismatic.io/docs/components/code/",
  "public": true,
  "display": {
    "label": "Code",
    "description": "Author and run your own code",
    "iconPath": "icon.png",
    "category": "Helpers",
    "iconBase64": ""
  },
  "connections": [
    {
      "key": "apiKey",
      "label": "API Key",
      "comments": "API Key connection",
      "inputs": [
        {
          "placeholder": "API Key",
          "required": true,
          "shown": true,
          "comments": "API Key",
          "key": "apiKey",
          "type": "string",
          "default": "",
          "label": "API Key"
        }
      ]
    },
    {
      "key": "apiKeySecret",
      "label": "API Key Secret",
      "comments": "API Key Secret connection",
      "inputs": [
        {
          "placeholder": "API Key",
          "required": true,
          "shown": true,
          "comments": "API Key",
          "key": "apiKey",
          "type": "string",
          "default": "",
          "label": "API Key"
        },
        {
          "placeholder": "API Secret",
          "required": true,
          "shown": true,
          "comments": "API Secret",
          "key": "apiSecret",
          "type": "password",
          "default": "",
          "label": "API Secret"
        }
      ]
    },
    {
      "key": "privateKey",
      "label": "Private Key",
      "comments": "Private key connection",
      "inputs": [
        {
          "placeholder": "Username",
          "required": true,
          "shown": true,
          "comments": "Username",
          "key": "username",
          "type": "string",
          "default": "",
          "label": "Username"
        },
        {
          "placeholder": "Private Key",
          "required": true,
          "shown": true,
          "comments": "Private Key",
          "key": "privateKey",
          "type": "text",
          "default": "",
          "label": "Private Key"
        }
      ]
    },
    {
      "key": "authorizationCode",
      "label": "OAuth 2.0 Authorization Code",
      "comments": "OAuth 2.0 Authorization Code flow",
      "oauth2Type": "authorization_code",
      "inputs": [
        {
          "placeholder": "Authorize URL",
          "required": true,
          "shown": true,
          "comments": "The OAuth 2.0 Authorization URL for the API",
          "key": "authorizeUrl",
          "type": "string",
          "default": "",
          "label": "Authorize URL"
        },
        {
          "placeholder": "Token URL",
          "required": true,
          "shown": true,
          "comments": "The OAuth 2.0 Token URL for the API",
          "key": "tokenUrl",
          "type": "string",
          "default": "",
          "label": "Token URL"
        },
        {
          "placeholder": "Scopes",
          "required": false,
          "shown": true,
          "comments": "Space separated OAuth 2.0 permission scopes for the API",
          "key": "scopes",
          "type": "string",
          "default": "",
          "label": "Scopes"
        },
        {
          "placeholder": "Client ID",
          "required": true,
          "shown": true,
          "comments": "Client Identifier of your app for the API",
          "key": "clientId",
          "type": "string",
          "default": "",
          "label": "Client ID"
        },
        {
          "placeholder": "Client Secret",
          "required": true,
          "shown": true,
          "comments": "Client Secret of your app for the API",
          "key": "clientSecret",
          "type": "password",
          "default": "",
          "label": "Client Secret"
        },
        {
          "required": false,
          "shown": true,
          "comments": "Additional header to supply to authorization requests",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Headers"
        }
      ]
    },
    {
      "key": "clientCredentials",
      "label": "OAuth 2.0 Client Credentials",
      "comments": "OAuth 2.0 Client Credentials flow",
      "oauth2Type": "client_credentials",
      "inputs": [
        {
          "placeholder": "Token URL",
          "required": true,
          "shown": true,
          "comments": "The OAuth 2.0 Token URL for the API",
          "key": "tokenUrl",
          "type": "string",
          "default": "",
          "label": "Token URL"
        },
        {
          "placeholder": "Scopes",
          "required": false,
          "shown": true,
          "comments": "Space separated OAuth 2.0 permission scopes for the API",
          "key": "scopes",
          "type": "string",
          "default": "",
          "label": "Scopes"
        },
        {
          "placeholder": "Client ID",
          "required": true,
          "shown": true,
          "comments": "Client Identifier of your app for the API",
          "key": "clientId",
          "type": "string",
          "default": "",
          "label": "Client ID"
        },
        {
          "placeholder": "Client Secret",
          "required": true,
          "shown": true,
          "comments": "Client Secret of your app for the API",
          "key": "clientSecret",
          "type": "string",
          "default": "",
          "label": "Client Secret"
        },
        {
          "required": false,
          "shown": true,
          "comments": "Additional header to supply to token requests",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Headers"
        }
      ]
    },
    {
      "key": "basic",
      "label": "Basic Username/Password",
      "comments": "Basic Username and Password connection",
      "inputs": [
        {
          "placeholder": "Username",
          "required": true,
          "shown": true,
          "comments": "Username",
          "key": "username",
          "type": "string",
          "default": "",
          "label": "Username"
        },
        {
          "placeholder": "Password",
          "required": true,
          "shown": true,
          "comments": "Password",
          "key": "password",
          "type": "password",
          "default": "",
          "label": "Password"
        }
      ]
    }
  ],
  "actions": {
    "runCode": {
      "display": {
        "label": "Code Block",
        "description": "Author and run your own code"
      },
      "examplePayload": {
        "data": null
      },
      "key": "runCode",
      "inputs": [
        {
          "required": true,
          "comments": "The code to be executed",
          "language": "javascript",
          "key": "code",
          "type": "code",
          "default": "/*\n  Access config variables by name through the configVars object. e.g.\n    const apiEndpoint = `${configVars[\"App Base URL\"]}/api`;\n\n  Access previous steps' results through the stepResults object. Trigger\n  and step names are camelCased. If the step \"Get Data from API\" returned\n  {\"foo\": \"bar\", \"baz\": 123}, you could destructure that data with:\n    const { foo, baz } = stepResults.getDataFromApi.results;\n\n  You can return string, number or complex object data. e.g.\n    return { data: { foo: \"Hello\", bar: 123.45, baz: true } };\n\n  Full documentation for the code component can be found at:\n    https://prismatic.io/docs/code-component-usage/\n\n  If your code becomes complex, or requires external dependencies,\n  please consider building a reusable custom component instead:\n    https://prismatic.io/docs/custom-components/writing-custom-components/\n*/\n\nmodule.exports = async ({ logger, configVars }, stepResults) => {\n  return { data: null };\n};\n",
          "label": "Code"
        }
      ]
    }
  },
  "triggers": {
    "runCodeTrigger": {
      "display": {
        "label": "Code Block Trigger",
        "description": "Author and run your own code as a trigger"
      },
      "synchronousResponseSupport": "invalid",
      "scheduleSupport": "invalid",
      "examplePayload": {
        "payload": null
      },
      "key": "runCodeTrigger",
      "inputs": [
        {
          "required": true,
          "comments": "The code to be executed",
          "language": "javascript",
          "key": "code",
          "type": "code",
          "default": "/*\n  Access config variables by name through the configVars object. e.g.\n    const apiEndpoint = `${configVars[\"App Base URL\"]}/api`;\n\n  Access the trigger payload using the payload argument. This includes\n  headers, the body of the request, and more information about the request.\n\n  You can return string, number or complex object data. e.g.\n    return { payload: { foo: \"Hello\", bar: 123.45, baz: true } };\n\n  You are also able to return an optional response to the webhook caller.\n  For example, you can respond with a CSV response like the following:\n    return {\n      payload: { foo: \"Hello\", bar: 123.45, baz: true },\n      response: { statusCode: 200, contentType: \"text/csv\", body: \"hello,world\" },\n    }\n\n  Full documentation for the code component can be found at:\n    https://prismatic.io/docs/code-component-usage/\n\n  If your code becomes complex, or requires external dependencies,\n  please consider building a reusable custom component instead:\n    https://prismatic.io/docs/custom-components/writing-custom-components/\n*/\n\nmodule.exports = async ({ logger, configVars }, payload) => {\n  const response = {\n    statusCode: 200,\n    contentType: \"text/plain\",\n    body: \"hello\",\n  };\n  return { payload, response };\n};",
          "label": "Code"
        }
      ]
    }
  },
  "dataSources": {},
  "documentation": {
    "description": "The **code** component allows you to write your own short snippets of JavaScript code, and is handy for writing quick functions or data transformations that are specific to your product or industry.\nPlease see the [full article](/docs/code-component-usage/) on the code component for information on when a code component is appropriate, and common use cases for a code component.\n",
    "dev": "Code component steps should be succinct and integration-specific.\nIf the code you write could be reused in other integrations, if it needs to handle credentials, or if the code is complex enough that it would benefit from unit tests, etc., you should write a [custom component](custom-components/writing-custom-components.mdx) instead.\n\nFor some examples of code component usage, check out these quickstart guides:\n\n- [Using a Code Component to Transform Data](quickstarts/code-component-to-transform-data.mdx)\n- [Generating a PDF with a Code Component](quickstarts/generating-a-pdf-with-a-code-component.mdx)\n"
  },
  "$version": 1
}
