{
  "key": "data-mapper",
  "documentationUrl": "https://prismatic.io/docs/components/data-mapper/",
  "public": true,
  "display": {
    "label": "Data Mapper",
    "description": "Map input values to output values using a specified mapping",
    "iconPath": "icon.png",
    "category": "Helpers",
    "iconBase64": ""
  },
  "actions": {
    "valueMapper": {
      "display": {
        "label": "Value Mapper",
        "description": "Map an input to an output using a map object"
      },
      "inputs": [
        {
          "label": "Input Value",
          "placeholder": "Input value",
          "required": true,
          "comments": "This is the key that will be used to find a value from the Value Map",
          "example": "apple",
          "type": "data",
          "default": "",
          "key": "inputValue"
        },
        {
          "label": "Value Map",
          "placeholder": "Key/Value map",
          "language": "json",
          "required": true,
          "comments": "A key/value map that matches inputs by key and returns their associated value(s).",
          "example": "{\n  \"apple\": \"fruit\",\n  \"blueberry\": \"fruit\",\n  \"carrot\": \"vegetable\",\n  \"green bean\": \"vegetable\",\n  \"orange\": \"fruit\"\n}",
          "type": "code",
          "default": "",
          "key": "valueMap"
        }
      ],
      "examplePayload": {
        "data": "fruit"
      },
      "key": "valueMapper"
    },
    "valueListMapper": {
      "display": {
        "label": "Value List Mapper",
        "description": "Map list of inputs to list of outputs using a map object"
      },
      "inputs": [
        {
          "label": "Input Value List",
          "placeholder": "List of input values",
          "required": true,
          "comments": "This is a list of keys that will be mapped to values using the Value Map.",
          "example": "`[\"apple\", \"orange\", \"carrot\"]`",
          "type": "data",
          "default": "",
          "key": "inputValueList"
        },
        {
          "label": "Value Map",
          "placeholder": "Key/Value map",
          "language": "json",
          "required": true,
          "comments": "A key/value map that matches inputs by key and returns their associated value(s).",
          "example": "{\n  \"apple\": \"fruit\",\n  \"blueberry\": \"fruit\",\n  \"carrot\": \"vegetable\",\n  \"green bean\": \"vegetable\",\n  \"orange\": \"fruit\"\n}",
          "type": "code",
          "default": "",
          "key": "valueMap"
        }
      ],
      "examplePayload": {
        "data": [
          "fruit, fruit, vegetable"
        ]
      },
      "key": "valueListMapper"
    }
  },
  "triggers": {},
  "connections": [],
  "documentation": {
    "description": "The **data mapper** component allows you to apply a _map_ to a value or list of values.\nThis is handy if you have a list of items, and would like to categorize each item.\n",
    "dev": "For example, if you have a list of input that reads:\n\n```json\n[\"apple\", \"orange\", \"carrot\"]\n```\n\nand a map that reads:\n\n```json\n{\n  \"apple\": \"fruit\",\n  \"blueberry\": \"fruit\",\n  \"carrot\": \"vegetable\",\n  \"green bean\": \"vegetable\",\n  \"orange\": \"fruit\"\n}\n```\n\nthen a **value list mapper** action would output `[\"fruit\", \"fruit\", \"vegetable\"]`.\n"
  },
  "$version": 1
}
