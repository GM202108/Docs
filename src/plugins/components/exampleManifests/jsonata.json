{
  "key": "jsonata",
  "documentationUrl": "https://prismatic.io/docs/components/jsonata/",
  "public": true,
  "display": {
    "label": "JSONata",
    "description": "Transform data using the JSONata query and transformation language",
    "iconPath": "icon.png",
    "category": "Helpers",
    "iconBase64": ""
  },
  "connections": [],
  "actions": {
    "transform": {
      "display": {
        "label": "Transform",
        "description": "Transform data using JSONata"
      },
      "examplePayload": {
        "data": 24
      },
      "key": "transform",
      "inputs": [
        {
          "language": "plain",
          "required": true,
          "comments": "A JSONata expression used to generate a string.",
          "example": "$sum(example.value)",
          "key": "expression",
          "type": "code",
          "default": "",
          "label": "Expression"
        },
        {
          "placeholder": "Data to pass to JSONata",
          "language": "json",
          "required": true,
          "comments": "This is an object with properties to feed into the JSONata expression.",
          "example": "{\"example\":[{\"value\":4},{\"value\":7},{\"value\":13}]}",
          "key": "data",
          "type": "code",
          "default": "",
          "label": "Data"
        }
      ]
    }
  },
  "triggers": {},
  "dataSources": {},
  "documentation": {
    "description": "[JSONata](https://jsonata.org/) is a query and transformation language.\nThis component takes data and a JSONata expression as input, and returns transformed data based on the expression.\nJSONata is helpful when you have a predictable data structure as an input, and you want to output a modified data structure.\nJSONata includes common functions you might execute on a data set - things like `map`, `filter`, `sort`, `sum`, `string.split` (the list goes on).\n",
    "dev": "For example, suppose you had data that read:\n\n```json\n{\n  \"example\": [{ \"value\": 4 }, { \"value\": 7 }, { \"value\": 13 }]\n}\n```\n\nIf you applied a JSONata expression that read `$sum(example.value)` to this data, `24` would be returned because `example.value` generates an array of `[4,7,13]`, and `$sum` finds the sum of those values.\n\nYou can find documentation and examples of JSONata expressions and functions on [JSONata's documentation](https://docs.jsonata.org/).\n\n:::info When to use the Code component instead\nThe JSONata component is helpful for data transformations, but if you are already comfortable with JavaScript or would like more flexibility in your data transformation, check out the [code component](components/code.mdx) instead.\n:::\n\n## Testing JSONata Expressions\n\nJSONata provides an incredibly useful [JSONata test environment](https://try.jsonata.org/) where you can try out expressions against data sets.\nThis tool gives you a tight feedback loop, so you can test expressions quickly before pasting them into a JSONata step of an integration.\n\n## Some JSONata Examples\n\nHere are a couple examples that show off how to use JSONata expressions to process data:\n\n### Concatenating and Filtering Data\n\nIn this example, a large block of information about a user is input.\nThe JSONata expression concatenates the user's first and last name, and uses [JSONata predicates](https://docs.jsonata.org/predicate#examples) to filter for the user's mobile phone number:\n\n<Tabs\n  defaultValue=\"expression\"\n  values={[\n      {label: \"Input Data\", value: \"inputData\"},\n      {label: \"JSONata Expression\", value: \"expression\"},\n      {label: \"Result\", value: \"result\"},\n  ]}>\n<TabItem value=\"inputData\">\n\n```json\n{\n  \"FirstName\": \"Fred\",\n  \"Surname\": \"Smith\",\n  \"Age\": 28,\n  \"Address\": {\n    \"Street\": \"Hursley Park\",\n    \"City\": \"Winchester\",\n    \"Postcode\": \"SO21 2JN\"\n  },\n  \"Phone\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"0203 544 1234\"\n    },\n    {\n      \"type\": \"office\",\n      \"number\": \"01962 001234\"\n    },\n    {\n      \"type\": \"office\",\n      \"number\": \"01962 001235\"\n    },\n    {\n      \"type\": \"mobile\",\n      \"number\": \"077 7700 1234\"\n    }\n  ],\n  \"Email\": [\n    {\n      \"type\": \"office\",\n      \"address\": [\"fred.smith@my-work.com\", \"fsmith@my-work.com\"]\n    },\n    {\n      \"type\": \"home\",\n      \"address\": [\"freddy@my-social.com\", \"frederic.smith@very-serious.com\"]\n    }\n  ],\n  \"Other\": {\n    \"Over 18 ?\": true,\n    \"Misc\": null,\n    \"Alternative.Address\": {\n      \"Street\": \"Brick Lane\",\n      \"City\": \"London\",\n      \"Postcode\": \"E1 6RF\"\n    }\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"expression\">\n\n```\n{\n  \"name\": FirstName & \" \" & Surname,\n  \"mobile\": Phone[type = \"mobile\"].number\n}\n```\n\n</TabItem>\n<TabItem value=\"result\">\n\n```json\n{\n  \"name\": \"Fred Smith\",\n  \"mobile\": \"077 7700 1234\"\n}\n```\n\n</TabItem>\n</Tabs>\n\n### Using Built-in JSONata Functions\n\nIn this example, information about a point-of-sale account lists an account name and an array of orders for several products.\nThe expression uses the built-in `$sum` and `$map` functions to generate an object containing account name and an array of orders with the total owed for each order.\n\n<Tabs\n  defaultValue=\"expression\"\n  values={[\n      {label: \"Input Data\", value: \"inputData\"},\n      {label: \"JSONata Expression\", value: \"expression\"},\n      {label: \"Result\", value: \"result\"},\n  ]}>\n<TabItem value=\"inputData\">\n\n```json\n{\n  \"Account\": {\n    \"Account Name\": \"Firefly\",\n    \"Order\": [\n      {\n        \"OrderID\": \"order103\",\n        \"Product\": [\n          {\n            \"Product Name\": \"Bowler Hat\",\n            \"ProductID\": 858383,\n            \"SKU\": \"0406654608\",\n            \"Description\": {\n              \"Colour\": \"Purple\",\n              \"Width\": 300,\n              \"Height\": 200,\n              \"Depth\": 210,\n              \"Weight\": 0.75\n            },\n            \"Price\": 34.45,\n            \"Quantity\": 2\n          },\n          {\n            \"Product Name\": \"Trilby hat\",\n            \"ProductID\": 858236,\n            \"SKU\": \"0406634348\",\n            \"Description\": {\n              \"Colour\": \"Orange\",\n              \"Width\": 300,\n              \"Height\": 200,\n              \"Depth\": 210,\n              \"Weight\": 0.6\n            },\n            \"Price\": 21.67,\n            \"Quantity\": 1\n          }\n        ]\n      },\n      {\n        \"OrderID\": \"order104\",\n        \"Product\": [\n          {\n            \"Product Name\": \"Bowler Hat\",\n            \"ProductID\": 858383,\n            \"SKU\": \"040657863\",\n            \"Description\": {\n              \"Colour\": \"Purple\",\n              \"Width\": 300,\n              \"Height\": 200,\n              \"Depth\": 210,\n              \"Weight\": 0.75\n            },\n            \"Price\": 34.45,\n            \"Quantity\": 4\n          },\n          {\n            \"ProductID\": 345664,\n            \"SKU\": \"0406654603\",\n            \"Product Name\": \"Cloak\",\n            \"Description\": {\n              \"Colour\": \"Black\",\n              \"Width\": 30,\n              \"Height\": 20,\n              \"Depth\": 210,\n              \"Weight\": 2\n            },\n            \"Price\": 107.99,\n            \"Quantity\": 1\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"expression\">\n\n```\n{\n  \"Account\": Account.`Account Name`,\n  \"Orders\": [\n    $map(Account.Order, function($v){\n      {\n        \"id\": $v.OrderID,\n        \"total\": $sum($map($v.Product, function($p) {\n          $p.Price * $p.Quantity\n        }))\n      }\n    })\n  ]\n}\n```\n\n</TabItem>\n<TabItem value=\"result\">\n\n```json\n{\n  \"Account\": \"Firefly\",\n  \"Orders\": [\n    {\n      \"id\": \"order103\",\n      \"total\": 90.57\n    },\n    {\n      \"id\": \"order104\",\n      \"total\": 245.79\n    }\n  ]\n}\n```\n\n</TabItem>\n</Tabs>\n"
  },
  "$version": 1
}
