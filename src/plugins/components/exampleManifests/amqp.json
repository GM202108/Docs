{
  "key": "amqp",
  "documentationUrl": "https://prismatic.io/docs/components/amqp/",
  "public": true,
  "display": {
    "label": "AMQP",
    "description": "Send and receive messages on an AMQP-based message broker",
    "iconPath": "icon.png",
    "category": "Data Platforms",
    "iconBase64": ""
  },
  "connections": [
    {
      "key": "amqp",
      "label": "AMQP Connection",
      "comments": "Authenticate requests to an amqp server",
      "inputs": [
        {
          "placeholder": "Host",
          "required": true,
          "shown": true,
          "comments": "The IP address or endpoint of the AMQP server",
          "key": "host",
          "type": "string",
          "default": "192.168.0.1",
          "label": "Host"
        },
        {
          "placeholder": "Port",
          "required": true,
          "shown": true,
          "comments": "The port of the AMQP server",
          "key": "port",
          "type": "string",
          "default": "5672",
          "label": "Port"
        },
        {
          "model": [
            {
              "label": "AMQP",
              "value": "amqp"
            },
            {
              "label": "AMQPS",
              "value": "amqps"
            }
          ],
          "required": true,
          "comments": "Provide the desired protocol in which you want to interact with the queue. ",
          "key": "protocol",
          "type": "string",
          "default": "amqp",
          "label": "Protocol"
        },
        {
          "placeholder": "Vhost",
          "required": false,
          "comments": "The \"example/vhost\" portion of amqps://amqp.example.com:5672/example/vhost",
          "key": "vhost",
          "type": "string",
          "default": "",
          "label": "Vhost"
        },
        {
          "placeholder": "Username",
          "required": false,
          "shown": true,
          "comments": "This can be omitted if the AMQP server allows anonymous authentication",
          "key": "username",
          "type": "string",
          "default": "",
          "label": "Username"
        },
        {
          "placeholder": "Password",
          "required": false,
          "shown": true,
          "comments": "This can be omitted if the AMQP server allows anonymous authentication",
          "key": "password",
          "type": "string",
          "default": "",
          "label": "Password"
        }
      ],
      "documentation": {
        "description": "An AMQP connection is comprised of a host name (this can be an IP address or FQDN endpoint), port, protocol and vhost.\nFor example, if you are told that your AMQP server is hosted at `amqps://amqp.example.com:5672/example/vhost`, enter `amqp.example.com` for the **host**, and `5672` for the **port**, select `AMQPS` for the **protocol**, and enter `example/vhost` for the **vhost**.\n\nAMQP often requires authentication (a username and password), but some AMQP servers are anonymous and do not require authentication.\nIf the server you're interacting with is allows anonymous authentication, you can omit the **username** and **password** fields.\n\nYou can verify that your settings are correct using the this component's [Check AMQP Connection](#check-amqp-connection) action.\n"
      }
    }
  ],
  "actions": {
    "getMessage": {
      "display": {
        "label": "Get Message",
        "description": "Receives a message from an AMQP-based queue"
      },
      "examplePayload": {
        "data": {
          "fields": {
            "deliveryTag": 1,
            "redelivered": true,
            "routingKey": "classic",
            "messageCount": 10
          },
          "properties": {
            "contentType": "text",
            "contentEncoding": "",
            "deliveryMode": "exampleMode",
            "priority": "High",
            "correlationId": "exampleId",
            "replyTo": "",
            "expiration": "",
            "messageId": "exampleId",
            "timestamp": "Fri, 06 Aug 2021 00:00:00 GMT",
            "type": "Buffer",
            "userId": "exampleId",
            "appId": "exampleId",
            "clusterId": "exampleId"
          },
          "content": {
            "type": "Buffer",
            "data": [
              69,
              120,
              97,
              109,
              112,
              108,
              101
            ]
          },
          "message": "Example Message Content"
        }
      },
      "key": "getMessage",
      "inputs": [
        {
          "example": "myQueue",
          "placeholder": "Queue Name",
          "required": true,
          "comments": "Provide the name of the queue you would like to interact with.",
          "key": "queueName",
          "type": "string",
          "default": "",
          "label": "Queue Name"
        },
        {
          "required": true,
          "key": "amqpConnection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "comments": "Automatically mark the message received as \"Acknowledged\"",
          "key": "acknowledgeMessage",
          "type": "boolean",
          "default": "true",
          "label": "Acknowledge Message"
        }
      ],
      "documentation": {
        "description": "This action will return a message from a given queue, if a message is available to get.\nIf no message is available, this action will return `null`.\n\nUse a [Branch on Expression](components/branch.mdx) step to branch based on whether or not a message was fetched.\nYou can check if the results of this step are non-null using the **exists** operator.\n\nYou have two options for marking a message \"acknowledged\":\n\n1. You can set the `Acknowledge Message` input to `true`.\n   This will cause the message to be acknowledged immediately, and the message will be removed from the queue.\n1. You can choose to not acknowledge the message immediately, but instead process the message and then pass the message to a [Acknowledge Message](#acknowledgeMessage) step instead.\n   This option is helpful if you would like to ensure the message is processed completely before removing it from the queue.\n"
      }
    },
    "publishMessage": {
      "display": {
        "label": "Publish Message",
        "description": "Add a message to an AMQP-based queue"
      },
      "examplePayload": {
        "data": true
      },
      "key": "publishMessage",
      "inputs": [
        {
          "required": true,
          "key": "amqpConnection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "example": "myQueue",
          "placeholder": "Queue Name",
          "required": true,
          "comments": "Provide the name of the queue you would like to interact with.",
          "key": "queueName",
          "type": "string",
          "default": "",
          "label": "Queue Name"
        },
        {
          "example": "Message to Queue",
          "placeholder": "Message",
          "required": true,
          "comments": "Provide a message to push on to the queue.",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "rejectMessage": {
      "display": {
        "label": "Reject Message",
        "description": "Rejects one message from an AMQP-based queue"
      },
      "examplePayload": {
        "data": {
          "consumerTag": "amq.ctag-ExampleTag"
        }
      },
      "key": "rejectMessage",
      "inputs": [
        {
          "example": "myQueue",
          "placeholder": "Queue Name",
          "required": true,
          "comments": "Provide the name of the queue you would like to interact with.",
          "key": "queueName",
          "type": "string",
          "default": "",
          "label": "Queue Name"
        },
        {
          "required": true,
          "key": "amqpConnection",
          "type": "connection",
          "label": "Connection"
        }
      ]
    },
    "acknowledgeMessage": {
      "display": {
        "label": "Acknowledge Message",
        "description": "Acknowledge a previously fetched message"
      },
      "key": "acknowledgeMessage",
      "inputs": [
        {
          "required": true,
          "key": "amqpConnection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "An AMQP message. This must reference the results of a previous 'Get Message' step",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "checkConnection": {
      "display": {
        "label": "Check AMQP Connection",
        "description": "Verify that an AMQP server is available, and return the server's connection information. This is helpful for debugging purposes."
      },
      "examplePayload": {
        "data": {
          "host": "amqp.example.com",
          "copyright": "Copyright (c) 2007-2022 VMware, Inc. or its affiliates.",
          "information": "Licensed under the MPL 2.0. Website: https://rabbitmq.com",
          "platform": "Erlang/OTP 24.2.1",
          "product": "RabbitMQ",
          "version": "3.9.13",
          "connection": {
            "host": "amqp.example.com",
            "port": "5672",
            "vhost": "example/vhost",
            "password": "myPassword",
            "protocol": "amqp",
            "username": "myUsername"
          }
        }
      },
      "key": "checkConnection",
      "inputs": [
        {
          "required": true,
          "key": "amqpConnection",
          "type": "connection",
          "label": "Connection"
        }
      ]
    }
  },
  "triggers": {},
  "documentation": {
    "description": "The Advanced Message Queuing Protocol (**AMQP**) is a standard protocol for interacting with message brokers and queueing platforms.\nIt is used by many common message broker services like [Azure Event Hubs](https://azure.microsoft.com/en-us/services/event-hubs/), [Apache Qpid](https://qpid.apache.org/), [RabbitMQ](https://www.rabbitmq.com/) and more.\n\nThis component allows you to manage messages on an AMQP-based queue.\n"
  },
  "$version": 1
}
