{
  "key": "hash",
  "documentationUrl": "https://prismatic.io/docs/components/hash/",
  "public": true,
  "display": {
    "label": "Hash",
    "description": "Compute hashes of strings using common hash functions",
    "iconPath": "icon.png",
    "category": "Helpers",
    "iconBase64": ""
  },
  "connections": [],
  "actions": {
    "computeHash": {
      "display": {
        "label": "Compute Hash",
        "description": "Compute the hash of a string using a hash function"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computeHash",
      "inputs": [
        {
          "required": true,
          "example": "md5",
          "model": [
            {
              "label": "BLAKE2b512",
              "value": "blake2b512"
            },
            {
              "label": "BLAKE2s256",
              "value": "blake2s256"
            },
            {
              "label": "MD4",
              "value": "md4"
            },
            {
              "label": "MD5",
              "value": "md5"
            },
            {
              "label": "MD5-SHA1",
              "value": "md5-sha1"
            },
            {
              "label": "RIPEMD160",
              "value": "ripemd160"
            },
            {
              "label": "SHA1",
              "value": "sha1"
            },
            {
              "label": "SHA224",
              "value": "sha224"
            },
            {
              "label": "SHA256",
              "value": "sha256"
            },
            {
              "label": "SHA3-224",
              "value": "sha3-224"
            },
            {
              "label": "SHA3-256",
              "value": "sha3-256"
            },
            {
              "label": "SHA3-384",
              "value": "sha3-384"
            },
            {
              "label": "SHA3-512",
              "value": "sha3-512"
            },
            {
              "label": "SHA384",
              "value": "sha384"
            },
            {
              "label": "SHA512",
              "value": "sha512"
            },
            {
              "label": "SHA512-224",
              "value": "sha512-224"
            },
            {
              "label": "SHA512-256",
              "value": "sha512-256"
            },
            {
              "label": "SM3",
              "value": "sm3"
            },
            {
              "label": "whirlpool",
              "value": "whirlpool"
            }
          ],
          "key": "hashFunction",
          "type": "string",
          "default": "sha256",
          "label": "Hash Function"
        },
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computeHmac": {
      "display": {
        "label": "Compute HMAC Hash",
        "description": "Compute an HMAC hash given a message, secret and hash function"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hmac value>",
          "base64": "<base64 encoded hmac value>",
          "byteArray": {
            "type": "Buffer",
            "data": [
              60,
              98,
              121,
              116,
              101,
              32,
              97,
              114,
              114,
              97,
              121,
              32,
              104,
              109,
              97,
              99,
              32,
              118,
              97,
              108,
              117,
              101,
              62
            ]
          }
        }
      },
      "key": "computeHmac",
      "inputs": [
        {
          "required": true,
          "example": "md5",
          "model": [
            {
              "label": "BLAKE2b512",
              "value": "blake2b512"
            },
            {
              "label": "BLAKE2s256",
              "value": "blake2s256"
            },
            {
              "label": "MD4",
              "value": "md4"
            },
            {
              "label": "MD5",
              "value": "md5"
            },
            {
              "label": "MD5-SHA1",
              "value": "md5-sha1"
            },
            {
              "label": "RIPEMD160",
              "value": "ripemd160"
            },
            {
              "label": "SHA1",
              "value": "sha1"
            },
            {
              "label": "SHA224",
              "value": "sha224"
            },
            {
              "label": "SHA256",
              "value": "sha256"
            },
            {
              "label": "SHA3-224",
              "value": "sha3-224"
            },
            {
              "label": "SHA3-256",
              "value": "sha3-256"
            },
            {
              "label": "SHA3-384",
              "value": "sha3-384"
            },
            {
              "label": "SHA3-512",
              "value": "sha3-512"
            },
            {
              "label": "SHA384",
              "value": "sha384"
            },
            {
              "label": "SHA512",
              "value": "sha512"
            },
            {
              "label": "SHA512-224",
              "value": "sha512-224"
            },
            {
              "label": "SHA512-256",
              "value": "sha512-256"
            },
            {
              "label": "SM3",
              "value": "sm3"
            },
            {
              "label": "whirlpool",
              "value": "whirlpool"
            }
          ],
          "key": "hashFunction",
          "type": "string",
          "default": "sha256",
          "label": "Hash Function"
        },
        {
          "required": true,
          "example": "p@$sW0Rd",
          "comments": "The cryptographic secret key used to hash the payload's body. This must be a string or byte array",
          "key": "secretKey",
          "type": "string",
          "default": "",
          "label": "Secret Key"
        },
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ],
      "documentation": {
        "description": "If you plan to send webhook requests to a third-party from Prismatic, you can use the **Compute HMAC Hash** action to compute the HMAC hash of a given string using a **secret key**.\n"
      }
    },
    "computeblake2b512": {
      "display": {
        "label": "Compute BLAKE2b512 Hash",
        "description": "Compute the BLAKE2b512 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computeblake2b512",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computeblake2s256": {
      "display": {
        "label": "Compute BLAKE2s256 Hash",
        "description": "Compute the BLAKE2s256 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computeblake2s256",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computemd4": {
      "display": {
        "label": "Compute MD4 Hash",
        "description": "Compute the MD4 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computemd4",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computemd5": {
      "display": {
        "label": "Compute MD5 Hash",
        "description": "Compute the MD5 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computemd5",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computemd5-sha1": {
      "display": {
        "label": "Compute MD5-SHA1 Hash",
        "description": "Compute the MD5-SHA1 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computemd5-sha1",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computeripemd160": {
      "display": {
        "label": "Compute RIPEMD160 Hash",
        "description": "Compute the RIPEMD160 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computeripemd160",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha1": {
      "display": {
        "label": "Compute SHA1 Hash",
        "description": "Compute the SHA1 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha1",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha224": {
      "display": {
        "label": "Compute SHA224 Hash",
        "description": "Compute the SHA224 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha224",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha256": {
      "display": {
        "label": "Compute SHA256 Hash",
        "description": "Compute the SHA256 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha256",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha3-224": {
      "display": {
        "label": "Compute SHA3-224 Hash",
        "description": "Compute the SHA3-224 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha3-224",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha3-256": {
      "display": {
        "label": "Compute SHA3-256 Hash",
        "description": "Compute the SHA3-256 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha3-256",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha3-384": {
      "display": {
        "label": "Compute SHA3-384 Hash",
        "description": "Compute the SHA3-384 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha3-384",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha3-512": {
      "display": {
        "label": "Compute SHA3-512 Hash",
        "description": "Compute the SHA3-512 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha3-512",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha384": {
      "display": {
        "label": "Compute SHA384 Hash",
        "description": "Compute the SHA384 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha384",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha512": {
      "display": {
        "label": "Compute SHA512 Hash",
        "description": "Compute the SHA512 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha512",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha512-224": {
      "display": {
        "label": "Compute SHA512-224 Hash",
        "description": "Compute the SHA512-224 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha512-224",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesha512-256": {
      "display": {
        "label": "Compute SHA512-256 Hash",
        "description": "Compute the SHA512-256 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesha512-256",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computesm3": {
      "display": {
        "label": "Compute SM3 Hash",
        "description": "Compute the SM3 hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computesm3",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    },
    "computewhirlpool": {
      "display": {
        "label": "Compute whirlpool Hash",
        "description": "Compute the whirlpool hash of a string"
      },
      "examplePayload": {
        "data": {
          "hex": "<hex encoded hash value>",
          "base64": "<base64 encoded hash value>"
        }
      },
      "key": "computewhirlpool",
      "inputs": [
        {
          "required": true,
          "example": "Hello World",
          "comments": "The message to generate a hash of",
          "key": "message",
          "type": "string",
          "default": "",
          "label": "Message"
        }
      ]
    }
  },
  "triggers": {
    "hmacWebhookTrigger": {
      "display": {
        "label": "HMAC Webhook Trigger",
        "description": "Validate a payload using an HMAC hash function"
      },
      "synchronousResponseSupport": "valid",
      "scheduleSupport": "invalid",
      "isCommonTrigger": false,
      "key": "hmacWebhookTrigger",
      "inputs": [
        {
          "required": false,
          "example": "200",
          "model": [
            {
              "label": "100 Continue",
              "value": "100"
            },
            {
              "label": "101 Switching Protocols",
              "value": "101"
            },
            {
              "label": "200 OK",
              "value": "200"
            },
            {
              "label": "201 Created",
              "value": "201"
            },
            {
              "label": "202 Accepted",
              "value": "202"
            },
            {
              "label": "203 Non-Authoritative Information",
              "value": "203"
            },
            {
              "label": "204 No Content",
              "value": "204"
            },
            {
              "label": "205 Reset Content",
              "value": "205"
            },
            {
              "label": "206 Partial Content",
              "value": "206"
            },
            {
              "label": "300 Multiple Choices",
              "value": "300"
            },
            {
              "label": "301 Moved Permanently",
              "value": "301"
            },
            {
              "label": "302 Found",
              "value": "302"
            },
            {
              "label": "303 See Other",
              "value": "303"
            },
            {
              "label": "304 Not Modified",
              "value": "304"
            },
            {
              "label": "307 Temporary Redirect",
              "value": "307"
            },
            {
              "label": "400 Bad Request",
              "value": "400"
            },
            {
              "label": "401 Unauthorized",
              "value": "401"
            },
            {
              "label": "402 Payment Required",
              "value": "402"
            },
            {
              "label": "403 Forbidden",
              "value": "403"
            },
            {
              "label": "404 Not Found",
              "value": "404"
            },
            {
              "label": "405 Method Not Allowed",
              "value": "405"
            },
            {
              "label": "406 Not Acceptable",
              "value": "406"
            },
            {
              "label": "407 Proxy Authentication Required",
              "value": "407"
            },
            {
              "label": "408 Request Timeout",
              "value": "408"
            },
            {
              "label": "409 Conflict",
              "value": "409"
            },
            {
              "label": "410 Gone",
              "value": "410"
            },
            {
              "label": "411 Length Required",
              "value": "411"
            },
            {
              "label": "412 Precondition Failed",
              "value": "412"
            },
            {
              "label": "413 Payload Too Large",
              "value": "413"
            },
            {
              "label": "414 URI Too Long",
              "value": "414"
            },
            {
              "label": "415 Unsupported Media Type",
              "value": "415"
            },
            {
              "label": "416 Range Not Satisfiable",
              "value": "416"
            },
            {
              "label": "417 Expectation Failed",
              "value": "417"
            },
            {
              "label": "426 Upgrade Required",
              "value": "426"
            },
            {
              "label": "428 Precondition Required",
              "value": "428"
            },
            {
              "label": "429 Too Many Requests",
              "value": "429"
            },
            {
              "label": "431 Request Header Fields Too Large",
              "value": "431"
            },
            {
              "label": "451 Unavailable For Legal Reasons",
              "value": "451"
            }
          ],
          "comments": "The HTTP status code to use for the response",
          "key": "statusCode",
          "type": "string",
          "default": "",
          "label": "Response Status Code"
        },
        {
          "required": false,
          "example": "application/json",
          "model": [
            {
              "label": "application/json",
              "value": "application/json"
            },
            {
              "label": "application/octet-stream",
              "value": "application/octet-stream"
            },
            {
              "label": "application/xhtml+xml",
              "value": "application/xhtml+xml"
            },
            {
              "label": "application/xml",
              "value": "application/xml"
            },
            {
              "label": "text/css",
              "value": "text/css"
            },
            {
              "label": "text/csv",
              "value": "text/csv"
            },
            {
              "label": "text/html",
              "value": "text/html"
            },
            {
              "label": "text/plain",
              "value": "text/plain"
            },
            {
              "label": "text/xml",
              "value": "text/xml"
            }
          ],
          "comments": "The Content-Type header to use for the response",
          "key": "contentType",
          "type": "string",
          "default": "",
          "label": "Response Content Type"
        },
        {
          "required": false,
          "comments": "List of key/value pairs to use as additional headers for the response",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Additional Response Headers"
        },
        {
          "required": false,
          "example": "{\"status\":\"success\"}",
          "comments": "The body to use for the response",
          "key": "body",
          "type": "string",
          "default": "",
          "label": "Response Body"
        },
        {
          "required": true,
          "example": "x-hmac-sha256",
          "comments": "The name of the header that contains the HMAC hash of the payload's body",
          "key": "hmacHeaderName",
          "type": "string",
          "default": "",
          "label": "HMAC Header Name"
        },
        {
          "required": true,
          "example": "p@$sW0Rd",
          "comments": "The cryptographic secret key used to hash the payload's body. This must be a string or byte array",
          "key": "secretKey",
          "type": "string",
          "default": "",
          "label": "Secret Key"
        },
        {
          "required": true,
          "example": "md5",
          "model": [
            {
              "label": "BLAKE2b512",
              "value": "blake2b512"
            },
            {
              "label": "BLAKE2s256",
              "value": "blake2s256"
            },
            {
              "label": "MD4",
              "value": "md4"
            },
            {
              "label": "MD5",
              "value": "md5"
            },
            {
              "label": "MD5-SHA1",
              "value": "md5-sha1"
            },
            {
              "label": "RIPEMD160",
              "value": "ripemd160"
            },
            {
              "label": "SHA1",
              "value": "sha1"
            },
            {
              "label": "SHA224",
              "value": "sha224"
            },
            {
              "label": "SHA256",
              "value": "sha256"
            },
            {
              "label": "SHA3-224",
              "value": "sha3-224"
            },
            {
              "label": "SHA3-256",
              "value": "sha3-256"
            },
            {
              "label": "SHA3-384",
              "value": "sha3-384"
            },
            {
              "label": "SHA3-512",
              "value": "sha3-512"
            },
            {
              "label": "SHA384",
              "value": "sha384"
            },
            {
              "label": "SHA512",
              "value": "sha512"
            },
            {
              "label": "SHA512-224",
              "value": "sha512-224"
            },
            {
              "label": "SHA512-256",
              "value": "sha512-256"
            },
            {
              "label": "SM3",
              "value": "sm3"
            },
            {
              "label": "whirlpool",
              "value": "whirlpool"
            }
          ],
          "key": "hashFunction",
          "type": "string",
          "default": "sha256",
          "label": "HMAC Hash Function"
        }
      ],
      "documentation": {
        "description": "HMAC (or hash-based message authentication code) is an authentication mechanism that allows you verify that incoming webhook messages are genuine.\n\n#### How does HMAC work?\n\nAn external system (yours or a third-party) produces a cryptographic hash of the webhook payload's body using a secret key, and sends the hash as an HTTP header along with the webhook request.\nOnly the external system and your integration know the secret key.\n\nThis trigger, then, uses the secret key to produce a hash of the received payload.\nIf the hash generated in the trigger matches the hash sent as a header, the payload is processed.\nIf the hashes do not match, an error is thrown and the integration does not run.\nThis prevents a bad actor from sending bogus payloads to your instances - they cannot spoof an HMAC hash without the correct signing key.\n\nYou can read more about HMAC on our [blog](https://prismatic.io/blog/how-secure-webhook-endpoints-hmac/).\n\n#### Example HMAC Signature\n\nSuppose you would like to sign a JSON payload that reads `{\"foo\":\"bar\",\"baz\":123,\"buz\":false}` using the SHA256 hashing algorithm (you can use a number of hashing algorithms, SHA256 being the most common for HMAC).\nYou've chosen a secret key of `secret123` (please use a more complex secret!).\nYou can generate a hash in NodeJS using the `crypto` module:\n\n```js title=\"Compute an HMAC hash in a third-party system\"\nconst body = '{\"foo\":\"bar\",\"baz\":123,\"buz\":false}';\nconst hmac = crypto.createHmac(\"sha256\", \"secret123\");\nconst hash = hmac.update(body, \"utf-8\").digest(\"hex\");\n// Generates 44cfc2defd77a70bedef0228634c45800fce1e678174895e984bd608c221bdb8\n```\n\nMost modern languages have HMAC libraries: [NodeJS](https://nodejs.org/api/crypto.html), [Python](https://docs.python.org/3/library/hmac.html), [PHP](https://www.php.net/manual/en/function.hash-hmac.php), [.NET C#](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.hmac?view=net-6.0).\n\nYou can then take that hash and pass it in as a header in a webhook invocation request:\n\n```bash\ncurl https://hooks.prismatic.io/example \\\n  --request POST \\\n  --header \"my-hmac-hash: 44cfc2defd77a70bedef0228634c45800fce1e678174895e984bd608c221bdb8\" \\\n  --header \"content-type: application/json\" \\\n  --data '{\"foo\":\"bar\",\"baz\":123,\"buz\":false}'\n```\n\nWhen you configure your HMAC trigger in Prismatic, then, you can enter `secret123` as your **HMAC Secret Key**, `my-hmac-hash` as your **HMAC Header Name**, and `SHA256` as your **HMAC Algorithm** (you can obviously change those values).\n"
      }
    }
  },
  "documentation": {
    "description": "The **Hash** component allows you to compute the hash of a string using a variety of common hash functions (MD5, SHA256, etc).\n"
  },
  "$version": 1
}
