{
  "key": "github",
  "public": true,
  "documentationUrl": "https://prismatic.io/docs/components/github/",
  "display": {
    "label": "GitHub",
    "description": "Manage users, repositories, licenses, and more on GitHub",
    "category": "Application Connectors",
    "iconPath": "icon.png",
    "iconBase64": ""
  },
  "connections": [
    {
      "key": "oauth2",
      "label": "OAuth 2.0",
      "oauth2Type": "authorization_code",
      "inputs": [
        {
          "shown": false,
          "required": true,
          "comments": "Authorization URL",
          "key": "authorizeUrl",
          "type": "string",
          "default": "https://github.com/login/oauth/authorize",
          "label": "Authorize URL"
        },
        {
          "shown": false,
          "required": true,
          "comments": "Token URL",
          "key": "tokenUrl",
          "type": "string",
          "default": "https://github.com/login/oauth/access_token",
          "label": "Token URL"
        },
        {
          "shown": true,
          "required": false,
          "comments": "Space-delimited scopes; refer to [GitHub's documentation for details](https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps)",
          "key": "scopes",
          "type": "string",
          "default": "",
          "label": "Scopes"
        },
        {
          "shown": true,
          "required": true,
          "comments": "Client identifier",
          "key": "clientId",
          "type": "string",
          "default": "",
          "label": "Client ID"
        },
        {
          "shown": true,
          "required": true,
          "comments": "Client secret",
          "key": "clientSecret",
          "type": "password",
          "default": "",
          "label": "Client Secret"
        }
      ],
      "documentation": {
        "description": "To connect to GitHub you will need to [create a new OAuth 2.0 application](https://github.com/settings/applications/new).\nFill in the required fields and supply Prismatic's callback URL as the **Authorization callback URL**: https<!---->://oauth2.prismatic.io/callback\n\nNext click \"Generate a new client secret\" and copy the values of both the **Client ID** and **Client Secret**.\n\nYou are now ready to create the OAuth 2.0 connection to GitHub within Prismatic:\n\n-   Enter the **Client ID** and **Client Secret** values into the same named fields.\n-   Determine [what scopes your use case requires](https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps) and add those to **Scopes** separating each with a space.\n\nSave your integration and you should now be able to connect and authenticate to GitHub.\n"
      }
    }
  ],
  "actions": {
    "reposListForOrg": {
      "display": {
        "label": "Repos List For Org",
        "description": "List organization repositories"
      },
      "key": "reposListForOrg",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The organization name",
          "key": "org",
          "type": "string",
          "default": "",
          "label": "Org"
        },
        {
          "required": false,
          "model": [
            {
              "label": "All",
              "value": "all"
            },
            {
              "label": "Public",
              "value": "public"
            },
            {
              "label": "Private",
              "value": "private"
            },
            {
              "label": "Forks",
              "value": "forks"
            },
            {
              "label": "Sources",
              "value": "sources"
            },
            {
              "label": "Member",
              "value": "member"
            },
            {
              "label": "Internal",
              "value": "internal"
            }
          ],
          "comments": "Specifies the types of repositories you want returned",
          "key": "type",
          "type": "string",
          "default": "",
          "label": "Type"
        },
        {
          "required": false,
          "model": [
            {
              "label": "Created",
              "value": "created"
            },
            {
              "label": "Updated",
              "value": "updated"
            },
            {
              "label": "Pushed",
              "value": "pushed"
            },
            {
              "label": "Full Name",
              "value": "full_name"
            }
          ],
          "comments": "The property to sort the results by",
          "key": "sort",
          "type": "string",
          "default": "created",
          "label": "Sort"
        },
        {
          "required": false,
          "model": [
            {
              "label": "Asc",
              "value": "asc"
            },
            {
              "label": "Desc",
              "value": "desc"
            }
          ],
          "comments": "The order to sort by",
          "key": "direction",
          "type": "string",
          "default": "",
          "label": "Direction"
        },
        {
          "comments": "The number of results per page (max 100)",
          "key": "perPage",
          "type": "string",
          "default": "30",
          "label": "Per Page"
        },
        {
          "comments": "Page number of the results to fetch",
          "key": "page",
          "type": "string",
          "default": "1",
          "label": "Page"
        }
      ]
    },
    "actionsCreateWorkflowDispatch": {
      "display": {
        "label": "Actions Create Workflow Dispatch",
        "description": "Create a workflow dispatch event"
      },
      "key": "actionsCreateWorkflowDispatch",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "required": true,
          "comments": "The ID of the workflow",
          "key": "workflowId",
          "type": "string",
          "default": "",
          "label": "Workflow Id"
        },
        {
          "required": true,
          "comments": "The git reference for the workflow",
          "key": "ref",
          "type": "string",
          "default": "",
          "label": "Ref"
        },
        {
          "required": false,
          "comments": "Input keys and values configured in the workflow file. This can be a JSON input mapping, or a reference to a previous step that returned an object.",
          "key": "inputs",
          "type": "string",
          "default": "{\"input1\":\"My Value\",\"input2\":\"My Other Value\"}",
          "label": "Inputs"
        }
      ]
    },
    "gitCreateBlob": {
      "display": {
        "label": "Git Create Blob",
        "description": "Create a blob"
      },
      "key": "gitCreateBlob",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "required": true,
          "comments": "The new blob\"s content",
          "key": "content",
          "type": "string",
          "default": "",
          "label": "Content"
        },
        {
          "required": false,
          "comments": "The encoding used for \"content\"",
          "key": "encoding",
          "type": "string",
          "default": "utf-8",
          "label": "Encoding"
        }
      ]
    },
    "gitGetRef": {
      "display": {
        "label": "Git Get Ref",
        "description": "Get a reference"
      },
      "key": "gitGetRef",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "required": true,
          "comments": "ref parameter",
          "key": "ref",
          "type": "string",
          "default": "",
          "label": "Ref"
        }
      ]
    },
    "gitCreateRef": {
      "display": {
        "label": "Git Create Ref",
        "description": "Create a reference"
      },
      "key": "gitCreateRef",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "required": true,
          "comments": "The name of the fully qualified reference (ie: \"refs/heads/master\")",
          "key": "ref",
          "type": "string",
          "default": "",
          "label": "Ref"
        },
        {
          "required": true,
          "comments": "The SHA1 value for this reference",
          "key": "sha",
          "type": "string",
          "default": "",
          "label": "Sha"
        },
        {
          "required": false,
          "example": "\"refs/heads/newbranch\"",
          "key": "key",
          "type": "string",
          "default": "",
          "label": "Key"
        }
      ]
    },
    "gitCreateTree": {
      "display": {
        "label": "Git Create Tree",
        "description": "Create a tree"
      },
      "key": "gitCreateTree",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "language": "json",
          "required": true,
          "comments": "Objects (of \"path\", \"mode\", \"type\", and \"content\" or \"sha\") specifying a tree structure. See https://docs.github.com/en/rest/git/trees#create-a-tree",
          "key": "tree",
          "type": "code",
          "default": "[\n  {\n    \"path\": \"test.txt\",\n    \"mode\": \"100644\",\n    \"content\": \"This is a test\"\n  }\n]",
          "label": "Tree"
        },
        {
          "required": false,
          "example": "9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
          "comments": "The SHA1 of an existing Git tree object which will be used as the base for the new tree",
          "key": "baseTree",
          "type": "string",
          "default": "",
          "label": "Base Tree"
        }
      ]
    },
    "issuesListComments": {
      "display": {
        "label": "Issues List Comments",
        "description": "List issue comments"
      },
      "key": "issuesListComments",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "required": true,
          "comments": "The number that identifies the issue",
          "key": "issueNumber",
          "type": "string",
          "default": "",
          "label": "Issue Number"
        },
        {
          "required": false,
          "comments": "Only show notifications updated after the given time",
          "key": "since",
          "type": "string",
          "default": "",
          "label": "Since"
        },
        {
          "comments": "The number of results per page (max 100)",
          "key": "perPage",
          "type": "string",
          "default": "30",
          "label": "Per Page"
        },
        {
          "comments": "Page number of the results to fetch",
          "key": "page",
          "type": "string",
          "default": "1",
          "label": "Page"
        }
      ]
    },
    "issuesCreateComment": {
      "display": {
        "label": "Issues Create Comment",
        "description": "Create an issue comment"
      },
      "key": "issuesCreateComment",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "required": true,
          "comments": "The number that identifies the issue",
          "key": "issueNumber",
          "type": "string",
          "default": "",
          "label": "Issue Number"
        },
        {
          "required": true,
          "comments": "The contents of the comment",
          "key": "body",
          "type": "string",
          "default": "",
          "label": "Body"
        }
      ]
    },
    "pullsCreate": {
      "display": {
        "label": "Pulls Create",
        "description": "Create a pull request"
      },
      "key": "pullsCreate",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "required": false,
          "comments": "The title of the new pull request",
          "key": "title",
          "type": "string",
          "default": "",
          "label": "Title"
        },
        {
          "required": true,
          "comments": "The name of the branch where your changes are implemented",
          "key": "head",
          "type": "string",
          "default": "",
          "label": "Head"
        },
        {
          "required": true,
          "comments": "The name of the branch you want the changes pulled into",
          "key": "base",
          "type": "string",
          "default": "",
          "label": "Base"
        },
        {
          "required": false,
          "comments": "The contents of the pull request",
          "key": "body",
          "type": "string",
          "default": "",
          "label": "Body"
        },
        {
          "required": false,
          "comments": "Indicates whether [maintainers can modify](https://docs",
          "key": "maintainerCanModify",
          "type": "boolean",
          "default": "false",
          "label": "Maintainer Can Modify"
        },
        {
          "required": false,
          "comments": "Indicates whether the pull request is a draft",
          "key": "draft",
          "type": "boolean",
          "default": "false",
          "label": "Draft"
        },
        {
          "required": false,
          "example": "1",
          "key": "issue",
          "type": "string",
          "default": "",
          "label": "Issue"
        }
      ]
    },
    "reposCreateWebhook": {
      "display": {
        "label": "Repos Create Webhook",
        "description": "Create a repository webhook"
      },
      "key": "reposCreateWebhook",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "required": true,
          "comments": "The URL to send data to",
          "key": "callbackUrl",
          "type": "string",
          "default": "",
          "label": "Callback URL"
        },
        {
          "required": true,
          "model": [
            {
              "label": "commit_comment",
              "value": "commit_comment"
            },
            {
              "label": "create",
              "value": "create"
            },
            {
              "label": "delete",
              "value": "delete"
            },
            {
              "label": "deploy_key",
              "value": "deploy_key"
            },
            {
              "label": "deployment",
              "value": "deployment"
            },
            {
              "label": "deployment_status",
              "value": "deployment_status"
            },
            {
              "label": "discussion",
              "value": "discussion"
            },
            {
              "label": "discussion_comment",
              "value": "discussion_comment"
            },
            {
              "label": "fork",
              "value": "fork"
            },
            {
              "label": "github_app_authorization",
              "value": "github_app_authorization"
            },
            {
              "label": "gollum",
              "value": "gollum"
            },
            {
              "label": "installation",
              "value": "installation"
            },
            {
              "label": "installation_repositories",
              "value": "installation_repositories"
            },
            {
              "label": "issue_comment",
              "value": "issue_comment"
            },
            {
              "label": "issues",
              "value": "issues"
            },
            {
              "label": "label",
              "value": "label"
            },
            {
              "label": "marketplace_purchase",
              "value": "marketplace_purchase"
            },
            {
              "label": "member",
              "value": "member"
            },
            {
              "label": "membership",
              "value": "membership"
            },
            {
              "label": "meta",
              "value": "meta"
            },
            {
              "label": "milestone",
              "value": "milestone"
            },
            {
              "label": "organization",
              "value": "organization"
            },
            {
              "label": "org_block",
              "value": "org_block"
            },
            {
              "label": "package",
              "value": "package"
            },
            {
              "label": "page_build",
              "value": "page_build"
            },
            {
              "label": "ping",
              "value": "ping"
            },
            {
              "label": "project",
              "value": "project"
            },
            {
              "label": "project_card",
              "value": "project_card"
            },
            {
              "label": "project_column",
              "value": "project_column"
            },
            {
              "label": "projects_v2_item",
              "value": "projects_v2_item"
            },
            {
              "label": "public",
              "value": "public"
            },
            {
              "label": "pull_request",
              "value": "pull_request"
            },
            {
              "label": "pull_request_review",
              "value": "pull_request_review"
            },
            {
              "label": "pull_request_review_comment",
              "value": "pull_request_review_comment"
            },
            {
              "label": "pull_request_review_thread",
              "value": "pull_request_review_thread"
            },
            {
              "label": "push",
              "value": "push"
            },
            {
              "label": "release",
              "value": "release"
            },
            {
              "label": "repository_dispatch",
              "value": "repository_dispatch"
            },
            {
              "label": "repository",
              "value": "repository"
            },
            {
              "label": "repository_import",
              "value": "repository_import"
            },
            {
              "label": "repository_vulnerability_alert",
              "value": "repository_vulnerability_alert"
            },
            {
              "label": "security_advisory",
              "value": "security_advisory"
            },
            {
              "label": "sponsorship",
              "value": "sponsorship"
            },
            {
              "label": "star",
              "value": "star"
            },
            {
              "label": "status",
              "value": "status"
            },
            {
              "label": "team",
              "value": "team"
            },
            {
              "label": "team_add",
              "value": "team_add"
            },
            {
              "label": "watch",
              "value": "watch"
            },
            {
              "label": "workflow_dispatch",
              "value": "workflow_dispatch"
            },
            {
              "label": "workflow_job",
              "value": "workflow_job"
            },
            {
              "label": "workflow_run",
              "value": "workflow_run"
            }
          ],
          "comments": "Determines what events trigger a webhook to fire",
          "key": "events",
          "type": "string",
          "default": "",
          "collection": "valuelist",
          "label": "Events"
        },
        {
          "required": false,
          "comments": "An optional secret to use to verify webhook authenticity. See https://docs.github.com/en/developers/webhooks-and-events/webhooks/securing-your-webhooks",
          "key": "webhookSecret",
          "type": "string",
          "default": "",
          "label": "Webhook Secret"
        }
      ]
    },
    "reposDeleteInstanceWebhooks": {
      "display": {
        "label": "Repos Delete Instance Webhooks",
        "description": "Delete all webhooks pointed at this Prismatic instance"
      },
      "key": "reposDeleteInstanceWebhooks",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        }
      ]
    },
    "reposDeleteWebhook": {
      "display": {
        "label": "Repos Delete Webhook",
        "description": "Delete a repository webhook by ID"
      },
      "key": "reposDeleteWebhook",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "required": true,
          "comments": "The unique identifier of the hook",
          "key": "hookId",
          "type": "string",
          "default": "",
          "label": "Hook ID"
        }
      ]
    },
    "reposListWebhooks": {
      "display": {
        "label": "Repos List Webhooks",
        "description": "List webhooks of a repository"
      },
      "key": "reposListWebhooks",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The account OWNER of the repository (https://github.com/OWNER/REPO)",
          "key": "owner",
          "type": "string",
          "default": "",
          "label": "Owner"
        },
        {
          "required": true,
          "comments": "The name of the REPO (https://github.com/OWNER/REPO)",
          "key": "repo",
          "type": "string",
          "default": "",
          "label": "Repository Name"
        },
        {
          "comments": "Show only webhooks that point to this instance",
          "key": "showOnlyInstanceWebhooks",
          "type": "boolean",
          "default": "true",
          "label": "Show only instance webhooks"
        }
      ]
    },
    "usersGetByUsername": {
      "display": {
        "label": "Users Get By Username",
        "description": "Get a user"
      },
      "key": "usersGetByUsername",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "required": true,
          "comments": "The handle for the GitHub user account",
          "key": "username",
          "type": "string",
          "default": "",
          "label": "Username"
        }
      ]
    },
    "rawRequest": {
      "display": {
        "label": "Raw Request",
        "description": "Send a raw HTTP request to Github API"
      },
      "key": "rawRequest",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        },
        {
          "placeholder": "URL to call",
          "required": true,
          "comments": "Input the path only (/octocat), The base URL is already included (https://api.github.com). For example, to connect to https://api.github.com/octocat, only /octocat is entered in this field.",
          "example": "/octocat",
          "key": "url",
          "type": "string",
          "default": "",
          "label": "URL"
        },
        {
          "required": true,
          "model": [
            {
              "label": "DELETE",
              "value": "DELETE"
            },
            {
              "label": "GET",
              "value": "GET"
            },
            {
              "label": "HEAD",
              "value": "HEAD"
            },
            {
              "label": "LINK",
              "value": "LINK"
            },
            {
              "label": "OPTIONS",
              "value": "OPTIONS"
            },
            {
              "label": "PATCH",
              "value": "PATCH"
            },
            {
              "label": "POST",
              "value": "POST"
            },
            {
              "label": "PURGE",
              "value": "PURGE"
            },
            {
              "label": "PUT",
              "value": "PUT"
            },
            {
              "label": "UNLINK",
              "value": "UNLINK"
            }
          ],
          "comments": "The HTTP method to use.",
          "key": "method",
          "type": "string",
          "default": "",
          "label": "Method"
        },
        {
          "placeholder": "Data to send",
          "required": false,
          "comments": "The HTTP body payload to send to the URL.",
          "example": "{\"exampleKey\": \"Example Data\"}",
          "key": "data",
          "type": "string",
          "default": "",
          "label": "Data"
        },
        {
          "placeholder": "Data to send",
          "required": false,
          "comments": "The Form Data to be sent as a multipart form upload.",
          "example": "[{\"key\": \"Example Key\", \"value\": new Buffer(\"Hello World\")}]",
          "key": "formData",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Form Data"
        },
        {
          "placeholder": "Data to send",
          "required": false,
          "comments": "File Data to be sent as a multipart form upload.",
          "example": "[{key: \"example.txt\", value: \"My File Contents\"}]",
          "key": "fileData",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "File Data"
        },
        {
          "placeholder": "Query Parameter",
          "required": false,
          "comments": "A list of query parameters to send with the request. This is the portion at the end of the URL similar to ?key1=value1&key2=value2.",
          "key": "queryParams",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Query Parameter"
        },
        {
          "placeholder": "Header",
          "required": false,
          "comments": "A list of headers to send with the request.",
          "example": "User-Agent: curl/7.64.1",
          "key": "headers",
          "type": "string",
          "default": "",
          "collection": "keyvaluelist",
          "label": "Header"
        },
        {
          "placeholder": "Response Type",
          "required": true,
          "comments": "The type of data you expect in the response. You can request json, text, or binary data.",
          "model": [
            {
              "label": "arraybuffer",
              "value": "arraybuffer"
            },
            {
              "label": "document",
              "value": "document"
            },
            {
              "label": "json",
              "value": "json"
            },
            {
              "label": "text",
              "value": "text"
            }
          ],
          "key": "responseType",
          "type": "string",
          "default": "json",
          "label": "Response Type"
        },
        {
          "required": false,
          "comments": "The maximum time that a client will await a response to its request",
          "example": "2000",
          "key": "timeout",
          "type": "string",
          "default": "",
          "label": "Timeout"
        },
        {
          "required": false,
          "comments": "Enabling this flag will log out the current request.",
          "key": "debugRequest",
          "type": "boolean",
          "default": "false",
          "label": "Debug Request"
        },
        {
          "placeholder": "Retry Delay",
          "required": false,
          "comments": "The delay in milliseconds between retries.",
          "key": "retryDelayMS",
          "type": "string",
          "default": "0",
          "label": "Retry Delay (ms)"
        },
        {
          "required": false,
          "comments": "If true, retries on all erroneous responses regardless of type.",
          "key": "retryAllErrors",
          "type": "boolean",
          "default": "false",
          "label": "Retry On All Errors"
        },
        {
          "placeholder": "Max Retries",
          "required": false,
          "comments": "The maximum number of retries to attempt.",
          "key": "maxRetries",
          "type": "string",
          "default": "0",
          "label": "Max Retry Count"
        },
        {
          "required": false,
          "comments": "Specifies whether to use a pre-defined exponential backoff strategy for retries.",
          "key": "useExponentialBackoff",
          "type": "boolean",
          "default": "false",
          "label": "Use Exponential Backoff"
        }
      ],
      "documentation": {
        "description": "The **Raw Request** action allows you to interact with any [GitHub REST API](https://docs.github.com/en/rest/) endpoint.\n\nSuppose, for example, that you want to make use of GitHub's [Render a Markdown document](https://docs.github.com/en/rest/markdown#render-a-markdown-document) API endpoint.\nYou can enter `/markdown` as the **URL**, select `POST` as the **Method**.\nThe HTTP request's body for that endpoint needs an object with `text` and `mode`, which can be a reference of a previous step.\nA previous code step, for example could look like this:\n\n```javascript\nmodule.exports = async ({ logger, configVars }, stepResults) => {\n  const text = `> #### The quarterly results look great!\n>\n> - Revenue was off the chart.\n> - Profits were higher than ever.\n>\n>  *Everything* is going according to **plan**.`;\n  const mode = \"markdown\";\n  return { data: { text, mode } };\n};\n```\n"
      }
    }
  },
  "triggers": {
    "webhook": {
      "display": {
        "label": "GitHub Webhook",
        "description": "Handle and optionally validate webhook requests from GitHub"
      },
      "synchronousResponseSupport": "invalid",
      "scheduleSupport": "invalid",
      "key": "webhook",
      "inputs": [
        {
          "required": false,
          "comments": "An optional secret to use to verify webhook authenticity. See https://docs.github.com/en/developers/webhooks-and-events/webhooks/securing-your-webhooks",
          "key": "webhookSecret",
          "type": "string",
          "default": "",
          "label": "Webhook Secret"
        }
      ]
    }
  },
  "dataSources": {
    "listReposForAuthenticatedUser": {
      "display": {
        "label": "List Repos",
        "description": "List all of the authenticated user's repositories"
      },
      "dataSourceType": "picklist",
      "examplePayload": {
        "result": [
          {
            "key": "exampleuser/examplerepo",
            "label": "exampleuser/examplerepo"
          },
          {
            "key": "exampleorg/special-project",
            "label": "exampleorg/special-project"
          }
        ]
      },
      "key": "listReposForAuthenticatedUser",
      "inputs": [
        {
          "required": true,
          "key": "connection",
          "type": "connection",
          "label": "Connection"
        }
      ]
    }
  },
  "documentation": {
    "description": "[GitHub](https://github.com) is one of the largest and most advanced development platform in the world providing code repository hosting and more.\n",
    "dev": "The [GitHub REST API](https://docs.github.com/en/rest) is extensive, with almost a thousand unique endpoints.\nThis component has actions that wrap some of those endpoints that are commonly used in integrations.\nPlease [contact us](https://prismatic.io/contact/) if there are other GitHub endpoints that you would find helpful wrapped in an action.\nAlternatively, you can reach for the [Raw Request](#raw-request) action to interact with any GitHub endpoint.\n"
  },
  "$version": 1
}
